<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nathan Brenner</title>
    <description>A sample of my work and thoughts</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 11 Mar 2018 20:22:36 -0700</pubDate>
    <lastBuildDate>Sun, 11 Mar 2018 20:22:36 -0700</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Last post</title>
        <description>&lt;p&gt;This will be the last blog I publish for this site.&lt;/p&gt;

&lt;p&gt;I’ve replaced this site with &lt;a href=&quot;www.nathanbrenner.com&quot;&gt;nathanbrenner.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the start of this project, I wasn’t ever excited about how it looked. I never had any vision on some general theme, so it’s always looked pretty boring. Occassionally, I would go on a rant in a blog, or add some educational content based off of something else I was doing at the time.&lt;/p&gt;

&lt;p&gt;I never really wanted to maintain or regularly publish blogs. I don’t really want to teach to a large audience or be anything like a thought leader. I like writing code, occassionally helping others write code, build cool stuff for the web, and keep a private life.&lt;/p&gt;

&lt;p&gt;There were some other problems with this site. I built it right out of code school in hope it would get me work, so I put every student project up on github and created an angularjs app on the portfolio section of this site, which I haven’t maintained. That page had a lot of half written apps that could probably be deleted.&lt;/p&gt;

&lt;p&gt;Also, the resume on this site was difficult to update with the Word version that recruiters only seemed to care about.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.nathanbrenner.com&quot;&gt;nathanbrenner.com&lt;/a&gt; is a very simple single page portfolio. I got a theme from the open source, and I categered it to my own in a couple hours. It’s there to get people to contact me. It’s got 3 refurals (which are the same on my linkedIn profile), 3 past or current projects, a brief description and a picture of me, and how to contact me. That’s it.&lt;/p&gt;

&lt;p&gt;I also got over my fear of launching. I bought a domain name from godaddy, created an aws account, uploaded the files to s3, added a cloudfront distribution as a cdn, and connected route53 to the domain name. Some of this I had learned at my last gig, but it shows I can actually do stuff on aws.&lt;/p&gt;

&lt;p&gt;It needs some work though. The theme I pulled was using npm to manage jquery, a jquery plugin for scrolling, and bootstrap 4, all of which can be provided with a cdn. It’s also using gulp to minify the script and compile the sass. I don’t think any of that is really necessary.&lt;/p&gt;

&lt;p&gt;It could be cool to break up the long index.html with some react components, and add in a simple webpack config.&lt;/p&gt;

&lt;p&gt;I also want to automate the build with a script on a cicd, just so when I push up changes, s3 get’s updated and the live site get’s updated automatically.&lt;/p&gt;

&lt;p&gt;These tasks a lot easier to maintain than some big jekyll site.&lt;/p&gt;

&lt;p&gt;One last thing, the resume available on this site will no longer be the current version. I realized about a week ago that thing had gotten way bloated. There’s probably a half page for each job. I’ve reduced that to 2, and the most relevant content is near the top of the first page. I can tell you about the rest if you want, but you’ll just have to ask me. I think a resume should exist for the purpose of looking at for no more than 10 seconds to decide if you want talk to me, or to pass.&lt;/p&gt;

&lt;p&gt;I’m not taking this site down, because maybe I’ll use it for something else later, but I’m not refuring to it as my portfolio any longer. I suppose you could consider it my junior developer portfolio.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/last-post</link>
        <guid isPermaLink="true">http://localhost:4000/last-post</guid>
        
        
      </item>
    
      <item>
        <title>2017 recap</title>
        <description>&lt;p&gt;It’s been a while since I last wrote one of these (10 months) and I was listening to my favorite podcast this morning (Frontend Happy Hour) on my drive to work and I found myself reflecting on the last year.&lt;/p&gt;

&lt;p&gt;2017 was a really good year for me. To understand, we have to start with context.  2016 ended with me unemployed, finances weren’t great but moving in the right direction, pdx had gotten a ton of snow, my furnace went out, I was in the army, and trump was elected.&lt;/p&gt;

&lt;p&gt;Well..my tenure with the army ended in late december. I had hated it for the last three years, so I proptly stopped shaving and felt a huge sigh of relief. I had given up music and teaching 2 years ago and I was only giving minimal effort to play in the army band when most of what they had me doing was baritone sax in a rock band (could you make me want out any less?). There were also some spectacular personalities in that group that I was thrilled to never have to see again.  Needless to say, I bit my toungue a lot for the last 3 years. So 2017 meant no more of that horseshit, even though I had 2 years where they could call me back if say…hey some guy on twitter declared war on north korea.&lt;/p&gt;

&lt;p&gt;My family went to Reno to see family for christmas and I lied about my current work, but I came back to pdx with a job interview. I actually got the job, through a recruter I had worked for. With that good news, I went snowboarding for 2 days (background check was taking forever).  The gig was on the otherside of town, it was short term (two months), and it paid significantly less than any other coding job I’ve had at that point.  But a friend of mine (who was also looking for a job, we’ll call him Bob to protect his innocense) had a friend (we’ll call him Mark) who just got a job at a startup and needed angular devs, so he hired Bob and Bob (being the good friend he was) told him immediately of me.  The interview process was my kind: Here’s the problem, we’re a startup but fully funded, and we can pay you (coincidentally more than the last gig I had) so I left the contract with 2 weeks notice.  It was a risk, I kept working my ass off at that gig for 2 weeks even though I thought it would be fine to leave them screwed because of my previous experiences. Ironically the pr didn’t pursue hiring someone else to replace me so he made his shitty situation worse and from what I was left to know he had to take on my work when I left.&lt;/p&gt;

&lt;p&gt;The startup I joined was in a tiny office not too far from the other place I was working (which actually worked for the interview process) and was in constant remodeling while I was there. So the commute was bad (over 1.5 hour one way), but I was working with tools I knew (Angular). I showed up to 3 guys working on the front end of this app, and over the course of the following months I rewrote everything they did that was wrong (template based forms to start, and super bloated components). This isn’t so much about the awful code I inheirited, but the problems I solved from starting with existing code and getting it to work.  It started with user registration with Auth0 lock for authentication, along with the requirement for custom validation (reactive forms became a huge hit for me and I’ll never default to writing a form in angular in any other way). I worked with Bob on this for a bit, then he got switched to a related app. The boss put another dev on the backend (we’ll call this kid Mars).  He was young, had done some cs studying at a community college but had been around the longest. There was also a designer (Lewis).  Mars and Lewis worked for the most part next to my boss, so it was a few months of me working without being told what to work on before I got to know them. That actually worked for me.&lt;/p&gt;

&lt;p&gt;Well, this is the good news part: I’m still working there.  We changed locations in September. My commute time dropped significantly. Parking was an issue, and there’s a lot of homeless people around, but the office is great: Huge amount of space around me, lots of natural light, and I can still hear most conversations between my boss and the owner.  The app I mostly maintain has paying users (like if you want to use the app, you have to pay to use it). It’s not profitable yet, but that’s coming.&lt;/p&gt;

&lt;p&gt;My friend Bob left the company over 3 months ago.  We both had been frustrated with our boss. At one point, I was expected to do overtime and I drew the line in the sand with offers on the table. I confronted my boss, and we found room for agreement. I ended up working that weekend out of my own choice and the app moved forward. Bob however didn’t do this. Instead, he interviewed around, distanced himself from the team, and wrote a lot of shitty code.  He got a job offer and left…and I had to clean up his mess. That took roughly 3 months. It was miserable work. Lewis had also left (he didn’t get along with the boss either, but a shorter commute and huge pay raise influenced him too) so the designer wasn’t around (as if he ever gave me valuable feedback.  He spent most of his time designing another app while I was usually told to “do it like the other app”). We hired on two more devs. I found 2 guys, my boss interviewed them both and let them join, but only one stuck around. At that point, I decided I should probably watch over the development of stuff that I might have to take over if they leave. I was hired to manage and mentor other devs while writing maintainable code. I had given my friend a lot of room, and he ended up not asking and when he did I usually snapped at him because I was neck deep into the work I was doing. Lesson learned: I did my friend a disservice: He needed me to review his code for him, and I didnt’ take ownership of his code. Maybe I alienated him, and I definately grew the feeling like he was bad at his work.  He left for another start up from what I can tell, he would be the lead dev. I doubt he would be successful based on his past experience.&lt;/p&gt;

&lt;p&gt;Back to those two guys I found: It’s really hard to find good devs. I wanted to find someone that could jump into this thing and fix my problems. I wanted them to be as willing to jump in as I had been and willing to not need feed back. Here’s the problem: Fix it. Do a better job that I would do so I can focus on other things.  Apperently, in this town, that makes you a senior level developer. I had been in several places where that was what I was expected to. I hadn’t been in places where there were code reviews. There were short deadlines with high expectations.  So if you want to be a dev, you need some resilience. One of those 2 stuck around for a bit, but he lacked experience and thought he was below writing good css and html.  The other wasn’t a team player and didn’t waste as much of my time.&lt;/p&gt;

&lt;p&gt;My wife and I went to Hawaii for 2 weeks. It was the first time since the honeymoon that we took a real vacation. Her wonderful mother watched our son. We had a great time snorkeling, beach hoping, and eating good sushi. I left with the feeling that I couldn’t wait to come back.&lt;/p&gt;

&lt;p&gt;Not long after I had come back, I finished the big refactor on the mess. This might be a good time to mention other accomplishments: Along with learning to write good reactive forms, I learned how to write unit tests for angular, I figured out abstract classes, and I have to say it again I had a job for more than 6 months with a paid vacation (and later a huge christmas bonus and holiday party). I was secretly working on a huge refactor that brough in ngrx to manage state, but my app was stable. When bugs resurfaced, I was able to fix them fast and I’m really proud of the work I’ve done on this app. Now I had also cleaned up this other app. We had another remote contractor that I was now also managing: I review his code every morning, and we meet on google hangouts briefly.  I started out strictly micromanaging him and that’s moved to less as he has proven himself. He’s been a huge help.&lt;/p&gt;

&lt;p&gt;I also foolishly bought a 2017 Dodge Charger r/t.  It’s a badass car, I had been eyeing them for the past few years, and the commute was terrible with manual trasmission. I had conquered manual transmission, but was ready to go back to automatic. I bought the car in April, was able to afford it, and it’s been a lot of fun.&lt;/p&gt;

&lt;p&gt;Finances have been great this year.  With two full time parents both making over 80k salary, we’ve paid off most our consumer debt. 2018 is looking like we might be making another tiny human, and if I can make more money with that addition, my wife might decide to work a little less (which I would love). We’ve got credit cards that we don’t have debt that’s passing on each month, and we’re deep in the green each month (which we were able to do things like Hawaii without blinking an eye). Thank you to employers that care about the work we do.&lt;/p&gt;

&lt;p&gt;I can’t say enough good things about the people I work with.  We have a bunch of sales people that continue to recognize and respect the work I do, I’ve settled on how I feel about my boss and I actually like him more than not. The owner is great and I love that he’s so easy to work with. The guy drives a tesla and has a really interesting personality, and treats the people that work for him really well. He’s covered the cost for me to go to ng-conf next April, which I’m really excited about.&lt;/p&gt;

&lt;p&gt;Occassionaly, I’ll look at other oppertunities. I interviewed at another company, but it was a huge waste of my time.  I had 3 job interviews in 2017 and I won 2 of them.  Next job offer I get, I’ll probably use it as leverage to get a raise, but to be honest, I’d rather make my company a lot of money before I ask for stuff like that.  If anything, it’d be great if my backend dev gets more. His year was tough, but he’s young and bouncing back.&lt;/p&gt;

&lt;p&gt;What do I want for 2018? Potty training! My kid is amazing. He’s saying multiple word sequences, he’s full of smiles, laughs, and he’s the joy of my life.&lt;/p&gt;

&lt;p&gt;Christmas was hard..what do you want when you have more than you ever wanted? We stayed in town, my wife couldn’t get the time off work. It was actually kinda nice to stay in town for christmas.&lt;/p&gt;

&lt;p&gt;It would be great to see my company sky rocket over the next year. I know I’m being selfish, but I want to not have to job hunt at all this year. I could continue to rant, but this seems good enough for now. Thank you for such a wonderful year.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/2017-recap</link>
        <guid isPermaLink="true">http://localhost:4000/2017-recap</guid>
        
        
      </item>
    
      <item>
        <title>Backbone Revisited</title>
        <description>&lt;p&gt;It’s 2017 and the popular modern javascript frameworks are React, Angular 2, Ember, and maybe Vue. So why would you use Backbone? And if you had to use it, could you build a scalable application as well as you could with the fancy popular frameworks?&lt;/p&gt;

&lt;p&gt;ES6, Webpack, evergreen browsers, typescript, reactive programming, they’re all nice, but do you know JavaScript well enough to not have access to them? Or are you dependant on an opinionated framework and have you not made sound judgements on concepts like design principals?&lt;/p&gt;

&lt;p&gt;I found myself asking these questions recently when I had an oppertunity to build an app with barebones Backbone.  It had to be compatible with IE 10, and the client didn’t want to maintain a more modern framework. Even adding additional dependancies like a css framework or abstractions from Backbone like  Marionette or a backbone plugin wasn’t possible.  It was a hardware shop with a small software engineering team of mostly C# experience.&lt;/p&gt;

&lt;p&gt;I also inheirited some code. This was a redo of an existing application that was static.  The customers wanted more flexibility to change the configurations of the app, so they needed to go from a static app that had used Backbone for it’s routing to a dynamic spa.&lt;/p&gt;

&lt;p&gt;The code I inheirited showed a few code smells and a serios lack of understanding of object oriented applications, basics in data structures, and best practices on html and css. I mean no harm to who wrote that code, and if anything I’d love to have some conversations with that person to figure out why they made the decisions to write what they did.&lt;/p&gt;

&lt;p&gt;First of all, don’t use id’s on html tags for css styles. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#my-element {
	styles ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using id’s like that is short sighted, and prone to bugs later one.  In this case, there would be multiple themes later on. In the first case, you might have a set of divs that would look like squares.  Later on, the user might decide that they want those squares to look like circles or rectangles.  Giving those square divs an &lt;code class=&quot;highlighter-rouge&quot;&gt;id=square&lt;/code&gt; in their Backbone view is a bad idea. Furthermore, targeting an html node with multiple id’s doesn’t make your selector any more spectific.  The id is already unique.  Don’t clutter up the css by doing something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#parentDiv #firstChildDiv {
	styles...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I refactored a lot of the css, and I started with reducing the additional targets first, so in the case above, I changed it to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#firstChildDiv {
	styles...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then I checked the browser, and if everything went well, I would switch the id to a class attribute. Even still, I might later refactor that again so that instead of assigning classes to elements by their role on the app, I would move the styles into classes that describe the styles in that class.  Those classes would become more flexible to use, and you end up having less styles in your css files.  It might seem off in the beginning, but think about things like buttons, where the look of a button on an app should be consistent.  So you don’t need button classes like &lt;code class=&quot;highlighter-rouge&quot;&gt;endBtn&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;startBtn&lt;/code&gt; which describe what their role and what they do.  It doesn’t describe their styles.  What they do will be defined in the javascript classes.&lt;/p&gt;

&lt;p&gt;There was also one big huge long exhaustive css file.  I broke that down into where those styles would be found. For example, the root page might have a css file for it, then for each additional route might have it’s own styles.  You can’t avoid the cascading nature of css, and you’ll still have to think about which order those files are loaded into the dom. It’s more for the sanity of the dev that has to maintain the application as it grows.&lt;/p&gt;

&lt;p&gt;Back to Backbone.  Backbone is a library that requires jQuery and lodash.  Lodash and Backbone were written by the same developer, and Backbone was a huge improvement in it’s time, when before you had Knockout (which I havn’t used), and otherwise jQuery.&lt;/p&gt;

&lt;p&gt;Lodash is a helper library that adds a lot of extra nice methods on classes like Arrays, but it is not there to replace the methods on Arrays (like map, forEach, reduce) that make javascript so functional.  Personally, I’ve been able to get by without it, but it was kinda nice to play with it a little more.&lt;/p&gt;

&lt;p&gt;Before jQuery, it took a lot more code to wire up a function to get called by an event on the dom.  And you had to often write code specific to each of the browsers because they didn’t play well so nicely.  This ended up poluting a lot of public variables into the global namespace (the window object), which might be fine if you are a server side app where everytime the user does anything, a request gets sent to the server, and the response reloads the entire application.  If you wanted to use javascript classes, you had to wire those up all on your own, and honestly you should try it so you understand what’s happening under the hood when you’re using more modern frameworks that have abstracted that code from you so you could build things faster.&lt;/p&gt;

&lt;p&gt;So Backbone is a library, that like Angular, React, and other frameworks, implement the MVC pattern for single page applications (SPA).  The Model View Controller (MVC) pattern became popular with server applications, and it hasn’t really worked out exactly in the font end.  What seems to have typically happened is more like MV* or MV whatever, where you have a view that has it’s javascript functions and properties, bound to a particular template.&lt;/p&gt;

&lt;p&gt;In Backbone, you get Models, Collections (which should be a set of models), and Views (which you can have a view for a model, and a view for a collection). Models should not have nested data structures, but if they do (since nested data structures work so well for javascript and real life items), you can’t implement them like that in the model. For example, you should not have a model like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var person = Backbone.Model.extend({
	defaults: {
		name: 'Nate',
		cars: [
			{
				year: 2008,
			},
			{
				year: 2009
			}
		]
	}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cars should be it’s own separated Collection with a Car model.  This separates the concerns and behaviors of those models and their cooresponding views from eachother. It makes your application scalable. It’s easier to test.  Instead, write your person Model like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function(){
App.Models.Person = Backbone.Model.extend({
	defaults: {
		name: 'Nate',
		cars: []
	}
});

App.Models.Car = Backbone.Model.extend({
	defaults: {
		year: 2008
	}
});

App.Collections.Cars = Backbone.Collection.extend({
	model: Car
});

})()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a lot there, and I would add that each of these would be in their own separate js file, all wrapped with an IIFE (Immediately Invocked Function Expression). &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; is a property specified earlier with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.App = { 
	Models: {},
	Collections: {},
	Views: {}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This keeps you from populating the global scope with a bunch of variables that could at some unknown point get changed (Sorry, this is es5. We only get lexical scoping, so you can change any declared variables at any point). The only time you should use &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is within a function, so that the varible is closed within that function.&lt;/p&gt;

&lt;p&gt;Alright, so now you are ready to create a view for the person, but how do you do that with the car model and cars collections. Like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;App.Views.Car = Backbone.View.extend({
	tagName: 'li',
	render: function(){
		this.$el.html(this.model.get('year'));
		return this;
	},
});

App.Views.Cars = Backbone.View.extend({
	tagName: 'ul',
	initialize: function(){
		this.collection.on('add', this.render);
	},
	render: function(){
		this.collection.forEach(function(car){
			this.$el.html();
			var myCar = new App.Models.Car(car);
			var myCarView = new App.Views.Car({model: myCar});
			this.$el.append(myCarView.render().el);
		});
		return this;
	},
});

App.Views.Person = Backbone.View.extend({
	render: function(){
		var cars = new App.Collection.Cars();
		var carsView = new App.Views.Cars({collection: cars});
		this.model.get('cars').forEach(function(car){
			cars.add(car);
		});
		this.$el.html();
		this.$el.append(carsView.render().el);
	}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A Backbone Collection is not a Javascript Array.  It inheirts from it.  An a view to a collection is not a Javascript Array.  If you have nested data structures, separate each nested property into a Collection bound to a specific model.&lt;/p&gt;

&lt;p&gt;This is a small example, but if you havn’t used Backbone recenlty, like if you inheirited someone else’s code, this is not going to be much better than spaghetti jQuery.  You don’t want to maintain a more modern framework? It’s more likely to be harder to maintain jquery and Backbone. I had a friend tell me that you basically have to write a framework when you’re building an app with Backbone.  Furthermore, you might not have such easy access to an active community that knows a lot about backbone.  It’s not hard to find old tutorials that no longer work, and plugins that are no longer being maintained.&lt;/p&gt;

&lt;p&gt;With that said, I enjoyed exercising my vanilla javascript chops.  There’s not a lot to learn from the docs, and you can use a lot of those best practices that you get for free in the modern frameworks. I actually found an oppertunity to use recusion, and I wrote a lot more inline documentation that I have ever done with a modern app.  I had to think carefully about how I would maintain state, and the names of my models, views, and collections.  It wasn’t a complicated app. I never had to use http.  I did have to develop with Visual Studio, and I’m very much looking forward to not doign that any time soon. And it was very interesting to see a C# application that integrated with javascript. After having build larger spas with modern frameworks, it was interesting looking at Backbone as if I had sunglasses on that embodied the modern stuff. I looked at data structures and problems differently because of what I knew about larger apps. I’m pretty sure when I first used backbone, I barely understood how to use Collections, Models, and Views approapriately, and I definately didn’t understand the issues concerning managing state and types of data structures.&lt;/p&gt;

&lt;p&gt;Ironically, at least one of the C# devs told me how he plays with Angular, and how much he loves TypeScript because it looks just like the C# code he writes.&lt;/p&gt;

&lt;p&gt;Bottom line: Stick with best practices for javascript and css.  Learn the fundamentals, ask for help, never stop learning, and look under the hood often.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/backbone-revisited</link>
        <guid isPermaLink="true">http://localhost:4000/backbone-revisited</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to reactive angular programming</title>
        <description>&lt;p&gt;Ngrx is a library that provides angular 2 developers to build reactive applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nathanBrenner/ngrxDemo2&quot;&gt;code for this tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/SecretSantaNg2Python/secretSanta-api&quot;&gt;rest api&lt;/a&gt; that I used to demo this tutorial.&lt;/p&gt;

&lt;h4 id=&quot;purpose&quot;&gt;Purpose:&lt;/h4&gt;
&lt;p&gt;Demonstrate how to build the following features:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;user registration,&lt;/li&gt;
  &lt;li&gt;user login&lt;/li&gt;
  &lt;li&gt;user logout&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;with the angular 2 cli and material design, and ngrx store and effects.&lt;/p&gt;

&lt;p&gt;I’m using a very basic rest api that I wrote for this demo.
It’s python with Flask.
Secret Santa but for now it’s a demo and reusable code for the first thing you should do if you need authentication/authorization&lt;/p&gt;

&lt;h4 id=&quot;why&quot;&gt;Why?&lt;/h4&gt;
&lt;p&gt;How do you manage state in an angular application?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;share it between services?&lt;/li&gt;
  &lt;li&gt;NGRX is a solution to this problem
What is state?&lt;/li&gt;
  &lt;li&gt;the data in your application, or in your components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what&quot;&gt;What?&lt;/h4&gt;
&lt;p&gt;This is not your classic angular
Flux =&amp;gt; Redux =&amp;gt; NGRX (redux with rxjs)
NGRX is a library with sections like&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Store to manage state,&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Effects to handle side effects (like making http requests)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Store-devtools: able to see what is the current state of the app&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;angular-1-pattern&quot;&gt;Angular 1 pattern:&lt;/h4&gt;
&lt;p&gt;Write the view first, business logic second&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write your static view,&lt;/li&gt;
  &lt;li&gt;Bind your controller to your view&lt;/li&gt;
  &lt;li&gt;Write your service&lt;/li&gt;
  &lt;li&gt;User events toggle methods on services&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ngrx-pattern&quot;&gt;Ngrx pattern:&lt;/h4&gt;
&lt;p&gt;Write the business logic first, then your views and components&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write your models&lt;/li&gt;
  &lt;li&gt;Write your events&lt;/li&gt;
  &lt;li&gt;Write your reducers that select on events&lt;/li&gt;
  &lt;li&gt;Write your services for your events&lt;/li&gt;
  &lt;li&gt;Write your effects&lt;/li&gt;
  &lt;li&gt;Build your dumb and smart componnts&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;smart-vs-dumb-components&quot;&gt;Smart vs dumb components&lt;/h4&gt;
&lt;p&gt;Container vs child
Smart components (routable componets or root component) recieve the value of their properties direclty from the store, and they dispatch events to the reducers
Dumb components have properties and events assigned from the smart compoents
Unidirectional dataflow: no two way binding
This pattern is very much like from what you would expect with react, and I’ve played with both, and personally the syntacic sugar feels more comfortable in ngrx
Observables: No promises.  Observables wait for a response from the api, so the current value can be changed
RXJS: You don’t have to know a lot about it, you can start using this pattern with just a couple operators (map, switchmap, of).
NGRX abstrats a lot of that heavy lifting of rxjs for you.&lt;/p&gt;

&lt;h4 id=&quot;steps&quot;&gt;steps&lt;/h4&gt;

&lt;h6 id=&quot;1-ng-new-ngrxdemo-create-a-new-angular-cli-project&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;ng new ngrxDemo&lt;/code&gt;: Create a new angular cli project.&lt;/h6&gt;

&lt;h6 id=&quot;2-install-dependancies-for-ngrx&quot;&gt;2. Install dependancies for ngrx&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i -S @ngrx/core @ngrx/store @ngrx/store-devtools @ngrx/effects @angular/material
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt; at the top:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { MaterialModule } from '@angular/material';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then for now just add in the store-devtools so you can pull it up:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imports: [
	...
	StoreDevtoolsModule.instrumentOnlyWithExtension(),
	MaterialModule.forRoot()
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and I’ll want the default theme for angular material, so in &lt;code class=&quot;highlighter-rouge&quot;&gt;styles.css&lt;/code&gt;, I’ll add&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@import '~@angular/material/core/theming/prebuilt/purple-green.css'';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll also need to install the Redux Devtools Extension&lt;/p&gt;

&lt;p&gt;Next, run &lt;code class=&quot;highlighter-rouge&quot;&gt;ng serve&lt;/code&gt;: Start the client side app, and open browser to http://localhost:4200/
	- You should see &lt;code class=&quot;highlighter-rouge&quot;&gt;app works!&lt;/code&gt;.  Right click, and locate &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux DevTools&lt;/code&gt;, Open that up.
	- The State panel is what I use the most, but this has a lot of additional functionality
	- Right now, it’ll just show &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;h6 id=&quot;3-create-the-shared-directory-and-in-that-directory-create-dirs-for-effects-models-reducers-and-services&quot;&gt;3. Create the shared directory, and in that directory, create dirs for effects, models, reducers, and services.&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;In effects: &lt;code class=&quot;highlighter-rouge&quot;&gt;touch session.effects.ts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In models: &lt;code class=&quot;highlighter-rouge&quot;&gt;touch user.interface.ts&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;touch session.interface.ts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In reducers: &lt;code class=&quot;highlighter-rouge&quot;&gt;touch session.reducer.ts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In services: &lt;code class=&quot;highlighter-rouge&quot;&gt;ng g s session&lt;/code&gt;, then move the spec and service into the services dir, and add it as a provider to the module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;4-next-draft-the-user-and-session-interfaces&quot;&gt;4. Next draft the user and session interfaces:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export interface User {
	email?: string;
	id?: number;
	password?: string;
	username?: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the session interface:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { User } from './user.interface'

export interface Session {
	user: User;
	token: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Token is for authentication, and all the properties on the User interface are optional so they don’t have to have a default property.  These data structures mirror the api models. I’ve found building these interfaces helps with the type safety that typescript provides.&lt;/p&gt;

&lt;h6 id=&quot;5-in-sessionreducerts-add&quot;&gt;5. In &lt;code class=&quot;highlighter-rouge&quot;&gt;session.reducer.ts&lt;/code&gt;, add:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { ActionReducer, Action } from '@ngrx/store';

import { Session } from '../models/session.interface';

export const SESSION_ACTIONS = {
	GET_USER: {
		ATTEMPT: 'SESSION_GET_USER_ATTEMPT',
		FAILURE: 'SESSION_GET_USER_FAILURE',
		SUCCESS: 'SESSION_GET_USER_SUCCESS'
	},
	LOGIN_USER: {
		ATTEMPT: 'SESSION_LOGIN_USER_ATTEMPT',
		FAILURE: 'SESSION_LOGIN_USER_FAILURE',
		SUCCESS: 'SESSION_LOGIN_USER_SUCCESS'
	},
	LOGOUT_USER: {
		ATTEMPT: 'SESSION_LOGOUT_USER_ATTEMPT'
	},
	REGISTER_USER: {
		ATTEMPT: 'SESSION_REGISTER_USER_ATTEMPT',
		FAILURE: 'SESSION_REGISTER_USER_FAILURE',
		SUCCESS: 'SESSION_REGISTER_USER_SUCCESS'
	},
}

const defaultSession: Session = {
	token: '',
	user: {}
}

export const sessionReducer: ActionReducer&amp;lt;Session&amp;gt; = (state: Session = defaultSession, {type, payload}: Action) =&amp;gt; {
	console.log('action', type, payload);
	switch(type){
		case SESSION_ACTIONS.GET_USER.SUCCESS:
			return Object.assign({}, state, {user: payload});
		case SESSION_ACTIONS.LOGIN_USER.SUCCESS:
			localStorage.setItem('Authorization', payload.token);
			return Object.assign({}, state, payload);
		case SESSION_ACTIONS.LOGOUT_USER.ATTEMPT:
			localStorage.clear();
			return Object.assign({}, state, defaultSession);
		case SESSION_ACTIONS.REGISTER_USER.SUCCESS:
			localStorage.setItem('Authorization', payload.token);
			return Object.assign({}, state, payload);
		default:
			return state;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a lot of code, and I don’t write reducers like this normally. I typically start with one thing at a time, but for now this is fine.&lt;/p&gt;

&lt;p&gt;First we import the dependancies from ngrx and the interface.
Next, we declare the actions, which are really just the action types.
Next, I declare the default session variable.&lt;/p&gt;

&lt;p&gt;Finally the reducer: An ActionReducer, which requires a type which in this case is the Session interface, and takes 2 parameters: the state which has the interface Session and the default value, which is the defaultSession.  The second parameter is the Action.  An action has a type and a payload.  The type is what your user has done.  The payload is the data that is sent when that action is called from the smart component, or dispatched. Payload is optional, but I usually send an empty object literal in that case.&lt;/p&gt;

&lt;p&gt;I’ve seen this reducer function declared in a couple different ways, and this is what I’ve come to like where I’m using es6 descruring and I’m defining the types fairly often.  When your application grows, the typescript is there to help debugging.&lt;/p&gt;

&lt;p&gt;Next is a log to the console, and that’s there just for debugging.  In Production, that’ll be removed.&lt;/p&gt;

&lt;p&gt;Finally the body of the function is nothing more than a switch case statement.  Each case is session action type on the success property.  With the exception of logging out, all of these methods require a request sent to the server.  That request will returna response, which is a side effect.  I don’t want the state of my app to be changed by the attempt action types, because if an error response is returned I should handle that change in the state differently.&lt;/p&gt;

&lt;p&gt;The statement in each case should be slim. You should always be returning a new version of the state and to keep the reducer function a pure fuction.  It shouldn’t have any side effects like changing data anywhere else.  This is where es6 Object.assign and the spread operators become really useful.&lt;/p&gt;

&lt;p&gt;Object.assign takes 3 params: An empty object, the object you’re copying, and optionally the property that you’d like to change on that copied object.&lt;/p&gt;

&lt;p&gt;The last case is often the first thing you’ll add when you write reducers where the default action is to return the state as it exists.  We’re thinking that this app is goign to get larger and to make are reducer functions slim, we should use flat data structures.  Every time an action is dispatched, every reducer function get’s called and runs through their own cases.  If the case matches, the state on that property of the store is changed, otherwise it just returns the state as it ccurrently exists.  Add on observables that can be subscribed to, and you get some great performance benifits.&lt;/p&gt;

&lt;h6 id=&quot;6-import-the-sessionreducer-into-the-appmodule-and-provide-the-sessionreducer-to-the-storemodule&quot;&gt;6. Import the SessionReducer into the AppModule and provide the SessionReducer to the StoreModule:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { sessionReducer } from './shared/reducers/session.reducer';

import: [
	...
  StoreModule.provideStore({
  	session: sessionReducer
  }),
	StoreDevtoolsModule.instrumentOnlyWithExtension(),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure the StoreModule is above the StoreDevtoolsModule&lt;/p&gt;

&lt;h6 id=&quot;7-so-finally-lets-access-the-store-in-appcomponent&quot;&gt;7. So finally, let’s access the store in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component&lt;/code&gt;:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component } from '@angular/core';
import { Store } from '@ngrx/store'


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  session$;

  constructor(private _store: Store&amp;lt;any&amp;gt;){
    this.session$ = _store.select('session');
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’ve brought in Store, declared the session property, and when an instance of this class is created, the session propety is assigned with the value of the session from the state.  If you check the  Redux DevTools, it should now show the session object and if you open it up, it’ll have the default values we specified in the reducer params.&lt;/p&gt;

&lt;p&gt;If you wanted to display that data, you could change the token property in &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultSession&lt;/code&gt;, then in  your app component template, provide: ``.  This isn’t the only way to get the value, and you’ll likely not be displaying properties of the store in smart components.&lt;/p&gt;

&lt;h6 id=&quot;8-add-router-and-some-components&quot;&gt;8. Add router and some components&lt;/h6&gt;

&lt;p&gt;Now that our reducer is set up, let’s demonstrate the features without using the backend. For that, we’re going to need a router and some additional components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;container components that the user could route to: home, registration, login, page-not-found&lt;/li&gt;
  &lt;li&gt;a navbar component to sit in the app component along with the router-outlet directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g c navbar
ng g c login
ng g c registration
ng g c home
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ll create routes for each of the container components in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.routing.ts&lt;/code&gt; and inject the router into the module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { NgModule }             from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { RegistrationComponent } from './registration/registration.component';
import { LoginComponent } from './login/login.component';
import { HomeComponent } from './home/home.component';
import { PageNotFoundComponent } from './page-not-found/page-not-found.component';

const routes: Routes = [

  { path: 'registration',  component: RegistrationComponent },
  { path: 'login', component: LoginComponent },
  { path: '', component: HomeComponent },
  { path: '**', component: PageNotFoundComponent }
];
@NgModule({
  imports: [ RouterModule.forRoot(routes) ],
  exports: [ RouterModule ]
})
export class AppRoutingModule {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;app.module&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imports: [
	...
	AppRoutingModule
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;9-build-the-navbar&quot;&gt;9. Build the navbar&lt;/h5&gt;

&lt;p&gt;Next, we’ll add the template for the navbar component so a user can click on a button for login and registration, and see those approapriate views render.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;md-toolbar color=&quot;primary&quot;&amp;gt;
	&amp;lt;a [routerLink]=&quot;['/']&quot; md-button&amp;gt;NgrxDemo&amp;lt;/a&amp;gt;

  &amp;lt;!-- This fills the remaining space of the current row --&amp;gt;
  &amp;lt;span class=&quot;fill-remaining-space&quot;&amp;gt;&amp;lt;/span&amp;gt;
	&amp;lt;div *ngIf=&quot;!user.id&quot;&amp;gt;
		&amp;lt;a 
			md-raised-button 
			[routerLink]=&quot;['/registration']&quot;
			color=&quot;accent&quot;
			class=&quot;navBtn&quot;
		&amp;gt;Registration&amp;lt;/a&amp;gt;
		&amp;lt;a 
			md-raised-button 
			[routerLink]=&quot;['/login']&quot; 
			color=&quot;accent&quot;
			class=&quot;navBtn&quot;
		&amp;gt;Login&amp;lt;/a&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;button 
		md-raised-button
		color=&quot;accent&quot;
		[mdMenuTriggerFor]=&quot;menu&quot; 
		*ngIf=&quot;user.id&quot;&amp;gt;
   
	&amp;lt;/button&amp;gt;

	&amp;lt;md-menu #menu=&quot;mdMenu&quot;&amp;gt;
		&amp;lt;button md-menu-item&amp;gt; Settings &amp;lt;/button&amp;gt;
		&amp;lt;button md-menu-item (click)=&quot;onSignOut.emit()&quot;&amp;gt; Sign Out &amp;lt;/button&amp;gt;
	&amp;lt;/md-menu&amp;gt;
&amp;lt;/md-toolbar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve added 4 sources of events: 3 which will change routes, and one that will emit an event &lt;code class=&quot;highlighter-rouge&quot;&gt;onSignOut&lt;/code&gt; when the button is clicked.  I’ve also specified that the registration sign in anchors should only appear if there’s a user id.  This is what makes the &lt;code class=&quot;highlighter-rouge&quot;&gt;navbar&lt;/code&gt; component a dumb component.  It doesn’t act on events and it doesn’t get data directly from the store.  It’s going get the data from it’s parent component and tell the parent component about the event emitted.&lt;/p&gt;

&lt;p&gt;In the component, we’ll need to import &lt;code class=&quot;highlighter-rouge&quot;&gt;Input&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Output&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EventEmitter&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ChangeDetectionStrategy&lt;/code&gt;.
Input: Properties that can be assigned to this component.
Output: Events that can be emitted from this component
EventEmitter: An instance of an event, basically sends up e (like from vanilla javascript dom events), and any data that you want to send with it
ChangeDetectionStrategy: Briefly, any dumb components that have Inputs need this to be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;onPush&lt;/code&gt; so that the properties of that component are only changed when an event has changed that property from the store. For a small app, this isn’t important because you don’t care about performance, but when you application scales up, and you find yourself with a lot more event emitters, change detection that’s contantly checking every bit of data in your app is expensive on performance.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class NavbarComponent {
  @Input() user;
  @Output() onSignOut = new EventEmitter();

  constructor() {
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve also added a little bit of css to spread out the buttons in the template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.fill-remaining-space {
  flex: 1 1 auto;
}

.navBtn {
  margin-right: 1rem;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, lets add the &lt;code class=&quot;highlighter-rouge&quot;&gt;navbar&lt;/code&gt; component and &lt;code class=&quot;highlighter-rouge&quot;&gt;router-outlet&lt;/code&gt; directive to our &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; component:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;app-navbar 
	[user]=&quot;(session$ | async)?.user&quot;
	(onSignOut)=&quot;onSignOut($event)&quot;
&amp;gt;&amp;lt;/app-navbar&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, I’ve assigned the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; property from the &lt;code class=&quot;highlighter-rouge&quot;&gt;navBar&lt;/code&gt; component to the &lt;code class=&quot;highlighter-rouge&quot;&gt;session$.user&lt;/code&gt; property on the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component&lt;/code&gt; with the asyn pipe to get the session.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; is the safe navigation operator, which is an angular way (and I guess it’s found in other languages) to guard against null and undefined values in the peroperty paths.  Without it, both Javascript and Angular throws a null reference error and the app crashes.  This is actually just something I figured out recently.  Alternatively, I could have subscribed to the store in the constructor like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_store.select('session').subscribe(session =&amp;gt; this.user = session.user);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that could become a problem if I don’t unsubscribe from the store when I stop using the component.  By using the &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; pipe and the safe navigation operator, I can avoid injecting the store directly into my components.  According to Rob Wormold, that’s a best practice in this case.&lt;/p&gt;

&lt;p&gt;I’ve also assigned the &lt;code class=&quot;highlighter-rouge&quot;&gt;onSignOut&lt;/code&gt; event emitter from &lt;code class=&quot;highlighter-rouge&quot;&gt;navbar&lt;/code&gt; component to the &lt;code class=&quot;highlighter-rouge&quot;&gt;onSignOut&lt;/code&gt; method from the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; component.  It takes a default argument &lt;code class=&quot;highlighter-rouge&quot;&gt;$event&lt;/code&gt;, which we’ll declare now, but leave alone since we can’t login or register yet, so you won’t be able to run this method.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onSignOut(){
	// todo
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Last for this step, in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.component.css&lt;/code&gt; just to add center the view:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:host div{
	max-width: 600px;
	margin: 10px auto;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:host&lt;/code&gt; psudo selector is targeting the app component template.&lt;/p&gt;

&lt;p&gt;Now you can click on any of those buttons, and you should see that the route changes.&lt;/p&gt;

&lt;h6 id=&quot;10-dynamic-forms&quot;&gt;10. Dynamic forms:&lt;/h6&gt;

&lt;p&gt;So I’m going to cheat a little bit. I don’t want to write a bunch of forms.  I’d rather write one form, and be able to use that form with a set of questions that I’ll provide to it. It keeps my app DRY and consistent.  Conveniently, I found in the angular docs cookbook section a guide to implement just this.  I would definately encourage you to check out this section and change your instance of it to meet your needs, like I have done so it works with angular material.&lt;/p&gt;

&lt;p&gt;This section isn’t specific to ngrx, so I’ve added&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;components: &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamicFormComponent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamicFormQuestionComponent&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;services: &lt;code class=&quot;highlighter-rouge&quot;&gt;QuestionService&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuestionControlService&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;classes: &lt;code class=&quot;highlighter-rouge&quot;&gt;QuestionBase&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuestionTextbox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;QuestionBase:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export class QuestionBase&amp;lt;T&amp;gt;{
	value: T;
	key: string;
	label: string;
	required: boolean;
	order: number;
	controlType: string;
	placeholder: string;

	constructor(options: {
		value?: T,
		key?: string,
		label?: string,
		required?: boolean,
		order?: number,
		controlType?: string,
		placeholder?: string,
	} = {}){
		this.value = options.value;
		this.key = options.key || '';
		this.label = options.label || '';
		this.required = !!options.required;
		this.order = options.order === undefined ? 1 : options.order;
		this.controlType = options.controlType || '';
		this.placeholder = options.placeholder;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TextboxQuestion:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { QuestionBase } from './question-base';

export class TextboxQuestion extends QuestionBase&amp;lt;string&amp;gt; {
  controlType = 'textbox';
  type: string;

  constructor(options: {} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;QuestionService:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Injectable }       from '@angular/core';

import { QuestionBase }     from '../question-base';
import { TextboxQuestion }  from '../question-textbox';

@Injectable()
export class QuestionService {
  getRegistrationQuestions() {
    let questions: QuestionBase&amp;lt;any&amp;gt;[] = [
      new TextboxQuestion({
        key: 'username',
        label: 'Username',
        required: true,
        type:'text',
        order: 1
      }),
      new TextboxQuestion({
        key: 'email',
        label: 'Email',
        required: true,
        type: 'text',
        order: 2
      }),
      new TextboxQuestion({
        key: 'password',
        label: 'Password',
        required: true,
        type: &quot;password&quot;,
        order: 3
      }),
      new TextboxQuestion({
        key: 'verify_password',
        label: 'Verify Password',
        required: true,
        type: 'password',
        order: 4
      })
    ];
    return questions.sort((a, b) =&amp;gt; a.order - b.order);
  }

  getLoginQuestions() {
    let questions: QuestionBase&amp;lt;any&amp;gt;[] = [
      new TextboxQuestion({
        key: 'email',
        label: 'Email',
        required: true,
        type: 'text',
        order: 1
      }),
      new TextboxQuestion({
        key: 'password',
        label: 'Password',
        required: true,
        type: 'password',
        order: 2
      })
    ];
    return questions.sort((a, b) =&amp;gt; a.order - b.order);
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;QuestionControlService:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Injectable }   from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';

import { QuestionBase } from '../question-base';

@Injectable()
export class QuestionControlService {
  constructor() { }

  toFormGroup(questions: QuestionBase&amp;lt;any&amp;gt;[] ) {
    let group: any = {};

    questions.forEach(question =&amp;gt; {
      group[question.key] = question.required ? new FormControl(question.value || '', Validators.required)
                                              : new FormControl(question.value || '');
    });
    return new FormGroup(group);
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DynamicFormQuestionComponent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, Input } from '@angular/core';
import { FormGroup }        from '@angular/forms';
import { QuestionBase }     from '../shared/question-base';

@Component({
  selector: 'df-question',
  templateUrl: 'dynamic-form-question.component.html'
})

export class DynamicFormQuestionComponent {
  @Input() question: QuestionBase&amp;lt;any&amp;gt;;
  @Input() form: FormGroup;

  get isValid() { return this.form.controls[this.question.key].valid; }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DynamicFormQuestion template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div [formGroup]=&quot;form&quot;&amp;gt;
  &amp;lt;div [ngSwitch]=&quot;question.controlType&quot;&amp;gt;
    &amp;lt;md-input-container&amp;gt;
      &amp;lt;input md-input *ngSwitchCase=&quot;'textbox'&quot; 
        placeholder=&quot;&quot; 
        [formControlName]=&quot;question.key&quot;
        [id]=&quot;question.key&quot; 
        type=&quot;&quot;
        required&amp;gt;
    &amp;lt;/md-input-container&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DynamicFormComponent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, Input, OnInit, EventEmitter, Output}  from '@angular/core';
import { FormGroup} from '@angular/forms';

import { QuestionBase }  from '../shared/question-base';
import { QuestionControlService } from '../shared/services/question-control.service';

@Component({
  selector: 'dynamic-form',
  templateUrl: 'dynamic-form.component.html',
  providers: [ QuestionControlService ]
})

export class DynamicFormComponent implements OnInit {
  @Input() questions: QuestionBase&amp;lt;any&amp;gt;[] = [];
  @Output() onSubmit = new EventEmitter();
  
  form: FormGroup;

  constructor(private qcs: QuestionControlService) {  }

  ngOnInit() {
    this.form = this.qcs.toFormGroup(this.questions);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DynamicFormComponent template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;form (ngSubmit)=&quot;onSubmit.emit(form.value)&quot; [formGroup]=&quot;form&quot;&amp;gt;
    &amp;lt;div *ngFor=&quot;let question of questions&quot; class=&quot;form-row&quot;&amp;gt;
      &amp;lt;df-question [question]=&quot;question&quot; [form]=&quot;form&quot;&amp;gt;&amp;lt;/df-question&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;form-row&quot;&amp;gt;
      &amp;lt;button md-raised-button type=&quot;submit&quot; [disabled]=&quot;!form.valid&quot;&amp;gt;submit&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In short, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuestionService&lt;/code&gt; will contain methods that return a list of questions for each form that we’ll need: Questions for registration, and questions for logging in.  We’ll build these forms in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic-form&lt;/code&gt; component, and drop them in their respective smart component.&lt;/p&gt;

&lt;p&gt;We’ll also need to import &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveFormsModule&lt;/code&gt; into our module from &lt;code class=&quot;highlighter-rouge&quot;&gt;@angular/forms&lt;/code&gt;, and to add our &lt;code class=&quot;highlighter-rouge&quot;&gt;QuestionService&lt;/code&gt; as a provider to our module.&lt;/p&gt;

&lt;h6 id=&quot;11-build-the-forms-for-registration-and-login&quot;&gt;11. Build the forms for registration and login:&lt;/h6&gt;

&lt;p&gt;registration component template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;md-card&amp;gt;
	&amp;lt;md-card-title&amp;gt;Registration&amp;lt;/md-card-title&amp;gt;
	&amp;lt;md-card-content&amp;gt;
		&amp;lt;dynamic-form 
			[questions]=&quot;questions&quot; 
			(onSubmit)=&quot;onSubmitRegistrationForm($event)&quot;
		&amp;gt;&amp;lt;/dynamic-form&amp;gt;
	&amp;lt;/md-card-content&amp;gt;
&amp;lt;/md-card&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then in the component:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { Router } from '@angular/router';

import { QuestionService } from '../shared/services/question.service';
import { SESSION_ACTIONS } from '../shared/reducers/session.reducer';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css'],
})
export class RegistrationComponent implements OnInit {
  questions: any[];

  constructor(
    private questionService: QuestionService, 
    private _store: Store&amp;lt;any&amp;gt;,
    private router: Router
  ) {
	  this.questions = questionService.getRegistrationQuestions();
  }

  ngOnInit() {
  }

  onSubmitRegistrationForm(payload){
    this._store.dispatch({
      type: SESSION_ACTIONS.REGISTER_USER.ATTEMPT,
      payload: payload
    });
    setTimeout(() =&amp;gt; this.router.navigate(['/']), 2000);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’ve imported the Store so we can dispatch an action when the dynamic form has been submitted.  The form get’s it’s questions from the questionService.&lt;/p&gt;

&lt;p&gt;Check the browser and you should see your registration page with 4 fields.&lt;/p&gt;

&lt;p&gt;A couple things to try when you do this on your own:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;log out to the console the payload to make sure the object you want to send is what you expect.&lt;/li&gt;
  &lt;li&gt;dispatch the success action to see the store change.  You should see a debugging message in the console, and the redux devtools should show the updated state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when you fill out the form, the state will change, and you’ll be redirected to the login. Now for the login component:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Store } from '@ngrx/store';

import { QuestionService } from '../shared/services/question.service';
import { SESSION_ACTIONS } from '../shared/reducers/session.reducer';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
})
export class LoginComponent implements OnInit {
  questions: any[];

  constructor(
    private questionService: QuestionService,
    private _store: Store&amp;lt;any&amp;gt;,
    private router: Router
  ) {
	  this.questions = questionService.getLoginQuestions();
  }

  ngOnInit() {
  }

  onSubmitLoginForm(payload){
    this._store.dispatch({
      type: SESSION_ACTIONS.LOGIN_USER.ATTEMPT,
      payload: payload
    })
    setTimeout(() =&amp;gt; this.router.navigate(['/']), 2000);
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;login template:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;md-card&amp;gt;
	&amp;lt;md-card-title&amp;gt;Login&amp;lt;/md-card-title&amp;gt;
	&amp;lt;md-card-content&amp;gt;
		&amp;lt;dynamic-form 
			[questions]=&quot;questions&quot;
			(onSubmit)=&quot;onSubmitLoginForm($event)&quot;
		&amp;gt;&amp;lt;/dynamic-form&amp;gt;
	&amp;lt;/md-card-content&amp;gt;
&amp;lt;/md-card&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;– Note: You’ll probably notice that the password field isn’t reflecting it’s type.  That’s a bug on angular material.  I played around with it for a bit on last Saturday and couldn’t get it to work.  Probably need to create an issue.&lt;/p&gt;

&lt;h6 id=&quot;12-adding-htmlwrapper-service-and-api-endpoint&quot;&gt;12. Adding htmlwrapper service and api endpoint:&lt;/h6&gt;
&lt;p&gt;For our services, we’re going to use something I’ve written that abstracts away a lot of the repetition in making http requests.  This particular service works with my rest api for handling token based authentication and handling events with ngrx effects, which we’ll do next.&lt;/p&gt;

&lt;p&gt;HttpWrapperService:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { Http, Headers, Response, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Observable'

import { API_ENDPOINT } from '../api';
import { ERROR_ACTIONS } from '../reducers/error.reducer';
import { HttpParams } from '../models/httpParams.interface';

@Injectable()
export class HttpWrapperService {
  /*
    These are the methods that are used in the additional services, 
    where otherwise they would require importing angular 2 http module.

    This keeps the services DRY, easier to test, and scalable.

  */

  constructor(private http: Http) { }

  private configRequest(uri: string, authRequired: boolean = false): {apiUrl: string, options: RequestOptions} {
    let apiUrl = `${API_ENDPOINT()}/${uri}`;

    let headers = authRequired ? 
      new Headers({
        'Content-Type': 'application/json',
        'Authorization' : `token ${localStorage['Authorization']}`
      }) : 
      new Headers({'Content-Type': 'application/json'});
    let options = new RequestOptions({ headers: headers });

    return {apiUrl, options};
  }

  public delete(params: HttpParams){
    let {apiUrl, options} = this.configRequest(params.uri, true)

    return this.http.delete(apiUrl, options)
      .map(res =&amp;gt; ({
        type: params.successActionType,
        payload: res.json()[params.responseObject]
      }))
      .catch(res =&amp;gt; Observable.of({
        type: ERROR_ACTIONS.REPORT_ERROR,
        payload: {
          action_type: params.errorActionType,
          message: res.json().error
        }
      }));
  }

  public get(params: HttpParams){
    let {apiUrl, options} = this.configRequest(params.uri, params.auth)

    return this.http.get(apiUrl, options)
      .map(res =&amp;gt; ({
        type: params.successActionType,
        payload: res.json()[params.responseObject]
      }))
      .catch(res =&amp;gt; Observable.of({
        type: ERROR_ACTIONS.REPORT_ERROR,
        payload: {
          action_type: params.errorActionType,
          message: res.json()
        }
      }))
  }

  public post(params: HttpParams){

    let {apiUrl, options} = this.configRequest(params.uri, params.auth)
    
    return this.http.post(apiUrl, params.payload, options)
      .map(res =&amp;gt; ({
        type: params.successActionType,
        payload: res.json()[params.responseObject]
      }))
      .catch(res =&amp;gt; Observable.of({
        type: ERROR_ACTIONS.REPORT_ERROR,
        payload: {
          action_type: params.errorActionType,
          message: res.json().error
        }
      }));
  }

  put(params: HttpParams){
    let {apiUrl, options} = this.configRequest(params.uri, true)

    return this.http.put(apiUrl, params.payload, options)
      .map(res =&amp;gt; ({
        type: params.successActionType,
        payload: res.json()[params.responseObject]
      }))
      .catch(res =&amp;gt; Observable.of({
        type: ERROR_ACTIONS.REPORT_ERROR,
        payload: {
          action_type: params.errorActionType,
          message: res.json().error
        }
      }));
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve also added an error reducer, an error interface, a api endpoint constant, and a httpParams interface.&lt;/p&gt;

&lt;p&gt;error interface:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export interface Error {
	action_type: string,
	id: number,
	message: string
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;error reducer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { ActionReducer, Action} from '@ngrx/store';

import { Error } from '../models/error.interface';

export const ERROR_ACTIONS = {
	REPORT_ERROR: 'REPORT_ERROR',
	REMOVE_ERROR: 'REMOVE_ERROR'
}

export const errorReducer: ActionReducer&amp;lt;Error[]&amp;gt; = (state: Error[] = [], {type, payload}: Action) =&amp;gt; {
	switch(type){
		case ERROR_ACTIONS.REPORT_ERROR:
			let id = Math.floor(Math.random() * 1000);
			payload.id = id;
			return [...state, payload]
		case ERROR_ACTIONS.REMOVE_ERROR:
			return state.filter(error =&amp;gt; error.id != payload.id);
		default:
			return state;
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;api.ts&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export const API_ENDPOINT = () =&amp;gt; {
	return document.URL.split('/')[2] == 'localhost:4200' 
		? 
		'http://127.0.0.1:8000/api/v1' 
		: 
		'todo: add production server'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;httpParams interface&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export interface HttpParams {
	auth?: boolean, // on true, then the token will be on the header. Optional (not needed for all post and get requests)
	errorActionType: string, // the failure action, should look something like `ACTION_TYPES.ACTION_TYPE.FAILURE`
	payload?: {}, // what you're sending on the http request, should be data from a form. Optional: not needed for get and delete requests
	responseObject: string, // this should be a property on the success resposonse body object
	successActionType: string, // If the http responce is a success, send this action type to the reducer, should be something like `ACTION_TYPES.ACTION_TYPE.SUCCESS`
	uri: string, // the api endpoint
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we only really care about the post method. We have a private method &lt;code class=&quot;highlighter-rouge&quot;&gt;configRequest&lt;/code&gt;, which returns our headers and api uri endpoint, and I’ve used destructuring to return the local variables I would need from the results of the &lt;code class=&quot;highlighter-rouge&quot;&gt;configRequest&lt;/code&gt;.  We’ve also imported Angular Http, which returns an Observable.  On the http.post, there is a success response handled with rxjs &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; operator, and the error response is handled with rxjs &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; operator. Both send back an observable, which is then handled in the reducer functions.&lt;/p&gt;

&lt;h6 id=&quot;13-next-we-are-going-to-write-up-the-session-service-to-handle-the-success-and-failure-actions&quot;&gt;13. Next we are going to write up the session service to handle the &lt;code class=&quot;highlighter-rouge&quot;&gt;success&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;failure&lt;/code&gt; actions.&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Injectable } from '@angular/core';

import { HttpWrapperService } from './http-wrapper.service';
import { SESSION_ACTIONS } from '../reducers/session.reducer';
import { HttpParams } from '../models/httpParams.interface';

@Injectable()
export class SessionService {

  constructor(private httpWrapperService: HttpWrapperService) {}

  getUser(){
    let getParams: HttpParams = {
      auth: true,
      errorActionType: SESSION_ACTIONS.GET_USER.FAILURE,
      responseObject: 'user',
      successActionType: SESSION_ACTIONS.GET_USER.SUCCESS,
      uri: 'user'
    }
    return this.httpWrapperService.get(getParams);
  }

  loginUser(payload: {email: string, password: string}){
    let postParams: HttpParams = {
      auth: false,
      errorActionType: SESSION_ACTIONS.LOGIN_USER.FAILURE,
      payload: payload,
      responseObject: 'account',
      successActionType: SESSION_ACTIONS.LOGIN_USER.SUCCESS,
      uri: 'user'
    }
    return this.httpWrapperService.post(postParams);
  }

  registerUser(payload: {username: string, email: string, password: string, verify_password: string}){
    let postParams: HttpParams = {
      auth: false,
      errorActionType: SESSION_ACTIONS.REGISTER_USER.FAILURE,
      payload: payload,
      responseObject: 'account',
      successActionType: SESSION_ACTIONS.REGISTER_USER.SUCCESS,
      uri: 'users'
    }
    return this.httpWrapperService.post(postParams)
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This service handles 3 types of requests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting a user: If a user has logged in, and refreshes the page or navigates to another website then comes back, if the token hasn’t expired, the session will persist.&lt;/li&gt;
  &lt;li&gt;Login user&lt;/li&gt;
  &lt;li&gt;Register user&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each wires up an object, and returns a method to the http wrapper with that object as it’s argument.&lt;/p&gt;

&lt;h6 id=&quot;14-the-last-step-to-make-this-work-is-to-add-in-ngrx-effects&quot;&gt;14. The last step to make this work is to add in ngrx effects.&lt;/h6&gt;
&lt;p&gt;session.effects:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/switchMap';
import { Actions, Effect } from '@ngrx/effects';

import { SessionService } from '../services/session.service';
import { SESSION_ACTIONS } from '../reducers/session.reducer';

@Injectable()
export class SessionEffects {
	
	constructor(
		private sessionService: SessionService,
		private actions$: Actions,
	){}

	@Effect() getUser$ = this.actions$
		.ofType(SESSION_ACTIONS.GET_USER.ATTEMPT)
		.map(action =&amp;gt; action.payload)
		.switchMap(payload =&amp;gt; this.sessionService.getUser())

	@Effect() loginUser$ = this.actions$
		.ofType(SESSION_ACTIONS.LOGIN_USER.ATTEMPT)
		.map(action =&amp;gt; action.payload)
		.switchMap(payload =&amp;gt; this.sessionService.loginUser(payload));

	@Effect() registerUser$ = this.actions$
		.ofType(SESSION_ACTIONS.REGISTER_USER.ATTEMPT)
		.map(action =&amp;gt; action.payload)
		.switchMap(payload =&amp;gt; this.sessionService.registerUser(payload));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need effects because we have to handle side effects.  When the user submits a form, we’re invoking the store to dispatch an &lt;code class=&quot;highlighter-rouge&quot;&gt;attempt&lt;/code&gt; action, which is basically an http requests.  So here, when the attempt action is fired, the approapriate effect uses &lt;code class=&quot;highlighter-rouge&quot;&gt;switchmap&lt;/code&gt; from ngrx to change streams and send that payload to the service.  Remember then, the service will update the state by changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make this work, we’ll need to run our session effects in our module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imports: [
	EffectsModule.run(SessionEffects),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try this out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure the rest api is running as expected with postman:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source env/bin/activate
python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Register a user works! State has been updated, as you can see from the redux devtools, postman, and the ui has changed.&lt;/p&gt;

&lt;h5 id=&quot;17-persist-the-session&quot;&gt;17 Persist the session&lt;/h5&gt;

&lt;p&gt;To keep going:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;onInit in app.component, check if there’s a token in localStorage.  If there is, dispatch an action to get the user.&lt;/li&gt;
  &lt;li&gt;Add a method on app.component to logout the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;updated app.component:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store'

import { SESSION_ACTIONS } from './shared/reducers/session.reducer';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  session$;

  checkLocalStorage(){
    if (localStorage['Authorization']) return this.getUser();
  }

  constructor(private _store: Store&amp;lt;any&amp;gt;){
    this.session$ = _store.select('session');
  }

  getUser(){
    this._store.dispatch({
      type: SESSION_ACTIONS.GET_USER.ATTEMPT,
      payload: {}
    });
  }

  ngOnInit(){
    this.checkLocalStorage();
  }

  onSignOut(){
    this._store.dispatch({
      type: SESSION_ACTIONS.LOGOUT_USER.ATTEMPT,
      payload: {}
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Further enhancements for you to try:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;add an dumb component, and subscribe to the error property in the store, pass that data up to the error component which shows any errors that occur and removes them with setTimeout&lt;/li&gt;
  &lt;li&gt;Add a success component that mirrors the error component.&lt;/li&gt;
  &lt;li&gt;Write unit tests&lt;/li&gt;
  &lt;li&gt;Add additional features to the specific app&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources:&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ngrx&quot;&gt;ngrx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;angular-cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zalmoxisus.github.io/redux-devtools-extension/&quot;&gt;redux-devtools-extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/dynamic-form.html&quot;&gt;dynamic forms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://material.angular.io/&quot;&gt;angular material&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/dynamic-form.html&quot;&gt;dynamic forms&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Jan 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/ngrx-tutorial</link>
        <guid isPermaLink="true">http://localhost:4000/ngrx-tutorial</guid>
        
        
      </item>
    
      <item>
        <title>Webpacking Simple Angular 1 apps</title>
        <description>&lt;p&gt;I’ve got a few front-end angular applications on my portfolio, and I’m ready to add on to them.  Originally, my portfolio was intended to show as a historical view point from where I started writing to where I was at the end of the Portland Code School Javascript Immersion program.  In the last year, I wanted to change that so there’s only a couple applications that bring out my strengths.  So that was just going to be some full-stack apps, but over time, it’s now involved angular 1.x written cleanly by John Papa’s styleguide, unit tests, webpack, and a backend with express and mongo.&lt;/p&gt;

&lt;p&gt;I had been putting off looking at Webpack and unit tests for a while, and I’m ready to take what I’ve learned and apply them a few times over in some applications.  This is another recipe type blog that can show how to take an existing angular application and add in webpack.&lt;/p&gt;

&lt;p&gt;I have a todo app with the following structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	node_modules
	todo
		todo.html
		todo.controller.js
	.gitignore
	app.module.js
	index.html
	package.json
	readme.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Index.html currently has a bunch of scripts in it (I didn’t bother with gulp on this case), and there’s a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;ui-view&lt;/code&gt; because I’m using angular ui-router.  There’s only one state, but this application was built the same way I would expect larger applications would be built.  That’s also why there’s a component type directory (todo) with it’s view and controller.&lt;/p&gt;

&lt;p&gt;Recipe:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;npm install webpack –save-dev –save-exact&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -S angular&lt;/code&gt; along with any other dependancies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I want to maintain the component type directory structure, so I’m not going to move the js files into a separate app directory.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Comment out the script dependencies in index.html&lt;/li&gt;
  &lt;li&gt;add in:
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/scripts/vendor.bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/scripts/app.bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch webpack.config.js&lt;/code&gt; in root of the app
    &lt;ol&gt;
      &lt;li&gt;require webpack and path modules&lt;/li&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;var config&lt;/code&gt; to an empty object&lt;/li&gt;
      &lt;li&gt;set &lt;code class=&quot;highlighter-rouge&quot;&gt;config.entry&lt;/code&gt; with two properties: app and vendor.  App should be set to the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.js&lt;/code&gt;, and vendor should list all of your vendor dependancies, which you installed from npm (in this case, angular, angular-ui-router, angular-animate, ui-boostrap, angular-touch)&lt;/li&gt;
      &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;config.output&lt;/code&gt; to property path to &lt;code class=&quot;highlighter-rouge&quot;&gt;__dirname + /scripts&lt;/code&gt; and property filename to &lt;code class=&quot;highlighter-rouge&quot;&gt;app.bundle.js&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Add in this plugin:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; plugins: [
 	new webpack.optimize.CommonsChunkPlugin(/* chunkName= */&quot;vendor&quot;, /* filename= */&quot;vendor.bundle.js&quot;)
 	]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Then set &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports = config&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;in app.module.js, require angular and the rest of the dependancies (you’ll need to do this with angular for all the app modules)&lt;/li&gt;
  &lt;li&gt;In app.module.js, require all of the modules (controllers, directives, services)&lt;/li&gt;
  &lt;li&gt;type &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; in the terminal (webpack has to be installed globally with npm)&lt;/li&gt;
  &lt;li&gt;Run webpack in terminal&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will get you started, and there’s a lot more to webpack than this.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/webpacking-ng-apps</link>
        <guid isPermaLink="true">http://localhost:4000/webpacking-ng-apps</guid>
        
        
      </item>
    
      <item>
        <title>Ready for another contract</title>
        <description>&lt;h3 id=&quot;original-post&quot;&gt;Original Post&lt;/h3&gt;

&lt;p&gt;My contract was ended about a week ago, on good terms.  I was told they didn’t have enough work to keep me on any longer.  It’s not fun losing a steady paycheck, but I was going in everyday expecting it to happen.  There hadn’t been a lot of email development, and there has been a lot of other contractors that had left, so it was my turn. All in all, it was a really good experience.  It was my first, and certainly not last, gig at writing code everyday, all day, as a developer. I wasn’t doing anything exciting, but it was challenging and I honed in on writing html and css.  When I had some spare time, I was able to contribute to a spa and I ended up completely refactoring the application so I can add credit to my resume as far as app development goes.  I created a smaller version of the app that I’m pretty happy with.  It’s on my portfolio page, multipage-form, and it’s up on gitHub.&lt;/p&gt;

&lt;p&gt;I’m feeling pretty optimistic that I’ll be able to find the next oppertunity without as much stuggle as I did before this contract. The first thing I did last week was contact all the recruiters that I knew and other connections that I had run into, and there’s a few leads out there.  It’d be great if I could be back on the clock in the next week, which is mostly to keep my wife happy.&lt;/p&gt;

&lt;p&gt;This is what I’m looking for: I’m a developer, not a designer, not management, not quality assurance.  I love working with code, the chrome dev tools, and a text editor.  Front-end work that involves Angular or/and backend work that involves node.js. I can build ui layouts from photoshop files, like I did with html emails, or from wireframes with css compilers like Sass and frameworks like Twitter Bootstrap or Angular Material. I’d also welcome the oppertunity to build cross platform apps with Ionic, NativeScript, or Electron. I’d also probably be good with refactoring an Anglar 1.x app over to Angular 2 due to the experience I’ve had with both and TypeScript.  Work with mongoDB would be even better since my skills have greatly improved in that area recently.&lt;/p&gt;

&lt;p&gt;Those are the areas that I can provide the greatest value to an employer. As far as culture, I’m not interested in working with a pc (I had one for the last 3 months.  They’re great in their own ways, but I like working from terminal and I like the touchpad). I’d like to work with a manager that will take the interest in getting to know me and not expect me to be a social butterfly off the bat, and I’ve worked for enough managers that aren’t professional.  I’m not interested in rocking any boats or asking for any degree of changes because I still have dues to pay. I’m fine with working as a contractor for the same reason, but I can’t wait to be a valued permanant member of a team. My wife’s work days don’t have a hard stop time, so I need to be able to pick up my son from daycare. I’m open to working from home and can be just as effective.  I’ve got an office with a window and a Thunderbolt display that can be a little hard to pull me away from.&lt;/p&gt;

&lt;p&gt;I’m definately willing to streach beyond those core areas, and I’d expected to be compensated less and to be supported more.  I’d love it if it were in areas like Angular 2, TypeScript, automated unit testing and other forms of testing. I’m also looking at adding in a module loader like Webpack or JSPM at some point. I’d also welcome working with another mvc like React or Ember.  I’ve heard a lot of support about the Ember community, so that might be worth looking into more, and Portland really seems to be latching on with React over Angular.  I’d like to spend some time with Python or Ruby, but unless I’m getting paid I’m not likely to jump in like I have with Angular or node.js.  I’m less inclined to do CMS work, but I’m sure I’d be successful with it.  I worked with PHP on the angular form, I’ve studied it along with the WordPress Codex.  It feels like I see a lot of job posts looking for experience with Java and asp.net so I’d love it if I could pick up some skills in those areas.&lt;/p&gt;

&lt;p&gt;I’m also feeling a lot more confident.  I’ve proven that I can write code that can go into production. Html emails was a great stepping stone for that, and I had a great project manager that helped me find my footing so I’m more capable of speaking up for what I can do, what I can’t, when I need help, and what’s realistic in a timeframe. I’ve become comfortable with fixing bugs, refactoring existing code, using JIRA to communicate with other steakholders, and tracking versions even if I’m not expected to. I worked iteratively, and I didn’t push breaking changes. I maintained professional relationships with the people I worked for, and I couldn’t even say a negative thing about anyone that I worked with.&lt;/p&gt;

&lt;p&gt;I was also persistent at pushing myself with professional development.  I found some time to work through some of the workshops on node school, so I feel a lot more confident about what I know and what I should study more.  Stream-adventure was great, and I need to run through it again. I also started looking at rest api’s, and I feel a lot closer to being able to add that layer to small projects with a cloud based database, like &lt;a href=&quot;https://mlab.com/&quot;&gt;mLab&lt;/a&gt; and to start using Mongoose more.&lt;/p&gt;

&lt;p&gt;I also got involved with the Mongo University program.  They brought me on as a ta to proof their lectures, and to answer student questions on the forum.  It’s a paid contract, and it’s not very time intensive, so with the gap in full time work has given me the time to study MongoDB a lot more, but I can also make a full time gig work with this thing. I also got a discount on the Mongo Developer Certification Exam, so I’m studying a lot for that right now and hope to add that to my resume soon. From answering student’s questions on the forum, it’s also clear that I can mentor less experienced developers, which I had done before as a instructor at Portland Code School.  I was also teaching one of my coworkers at CMD version control with git, and pointing her to resources on javascript with occational clarifications on some of the weird parts.&lt;/p&gt;

&lt;p&gt;Home life is really good right now.  My wife lost her job a few weeks ago. The situation was a little similar: She had worked at that place for a couple years, and had outgrown the clinic.  It was a great first gig but she was relieved when she was let go because it forced her to open herself to new oppertunities, and she had an easy time finding another employer that recognized her talent.  It feels like we’ve hit a stide with balancing work/finances/family.  That looks different for everyone.  For us, we both like our work, and our work compensates us so that we really enjoy the time off work. Our son is now crawling, and we just put him on the back of my bike.  He’s got 4 teeth, and is starting to eat solids beyond pureed food.  It’s hard to believe he’s close to a year old.&lt;/p&gt;

&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;

&lt;p&gt;I started a new job about a month ago, and I feel really lucky to have it.  I’m part of the Mercenary Tech team now and I think this could be a really good fit for a long time.  Mercenary works with small to midsize businesses to help build their applications.  It’s everything I wanted to do and I love the culture.  Before when I was asked questions like what sort of culture would I want to work with, or the sort of boss I’d like to have, my values, and other long term goals, I had a hard time answering because I had been looking for stable work for so long.  I remember the crossroads vividly, but I can only say roughly it was a couple years ago when I dropped pushing the music and education and started searching for something different.  Now I can confidently say I like working on front-end development.  I like working with people that are smarter than me and make me feel like I have to defend my opinions and keep learning new things both relevant to the problems I need to solve for my employer and what intriques me.  Front-end development is really screwed up right now, and there’s some amazing tools out there like Webpack, Typescript, System.js, Gulp, Sass, Mocha.&lt;/p&gt;

&lt;p&gt;So I’m teaching myself Python. I’m back on Treehouse watching videos as a starting point to learning the syntax and eventually get introduced into the frameworks like Django.  I haven’t seen very much backend javascript and mongoDB.  I don’t love design, I’ll tolerate writing css, and I’m not dying to become amazing at css preprocessors (but I know I need to work on that).  I like reactive spas, and I’m working on an angular 1 app so I know my way around it, I’m getting a lot more familiar with the inner parts, and I can’t wait to spend more time with angular 2 with typescript and es6.  I’m working with a remote based team, but I have access to work from a really great office in the Pearl.  Some of the members of the team are different, so I’m pushed out of my comfort zone to the extent that I’m ok with.  Again, I’m really lucky to be on such a talented team, and I think Mercenary is going to become very successful in the near future.  My employer is a learder, not a manager, and previously an engineer.  He comes from a farming family in Eastern Oregin, with a formal education in computer science, and for me I have an easy time to relate to possibly because I share some of his values like integrity, hard work, passion, family, maybe business.&lt;/p&gt;

&lt;p&gt;I’ve also been talking and throwing leads to some friends that are looking for work.  It feels like a lot of luck.  I met my current employer personally on a call when my 5 month old son sleeping in a rocker.  Nothing came out, and ironically he hired the spouse to the guy at another company that I was able to start working for.  That guy got fired, and ended up telling mercenary about me.  Portland is a small town, so it’s hard to get started, and once people have an opinion on you, that’s what you get stuck with, which is good and bad.  The same was the case for education, and when I screwed that up, I burned my bridges.  I hope I don’t have to do that again.&lt;/p&gt;

&lt;p&gt;In summary, I’m part of a development team that does consultant type work.  I expect to be working on similar type projects with varying levels of quality of code, with the expectation to solve the client’s problems with the least amount of code in the most effective ways.  Right now, that’s what I’ve been looking for the last few years. I’m hoping I can become as effective writing Python as I was with node, and that I can get enough experience with this gig so that when I’m ready to move on, I won’t be looking too hard for work.  The reality is that the tech bubble is going to pop soon.  There’s a lot of student devs, juniors, and sloppy intermediate devs that are going to lose their jobs, and they’re not going to have enough credibility to ride it out for the next gig to come along.  It feels like the only way to avoid that filter is to do good work and make yourself valuable to your employer/clients.&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/looking-for-next-contract</link>
        <guid isPermaLink="true">http://localhost:4000/looking-for-next-contract</guid>
        
        
      </item>
    
      <item>
        <title>Recipe for starting MongoD</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A couple posts ago, I made a ‘recipe’ for creating a typescript project with node.js.  I’ve actually used that a few times, and I’ve gotten some feedback from other devs that liked it, so this is another one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m a ta for a MongoDB University course with node.js that starts soon.  Part of that means I’ll be previewing the materials before the students have access so I can offer suggestions to the instructors, and the other part means I’ll be closely watching the forum so I can break blockers as they come up.  So I’m taking notes as I watch the video as an adjudicator to the course materials, to guess possible student questions, and to expand my understanding of MongoDB.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;format&quot;&gt;Format&lt;/h2&gt;
&lt;p&gt;The first few steps involve the browser, then they switch to a lot of bash commands in the terminal.  I’ve gotten MongoDB running on PCs, I’ve used Bash with some luck although I haven’t tried it on Windows 10 yet, and I’ve used Mac default Terminal (which I prefer), and iTerm.  I’m now using iTerm on my day job computer, and I haven’t tried that (maybe tomorrow, fingers crossed some fires stay out), so this post will get updated.&lt;/p&gt;

&lt;p&gt;Basically Bash command will be followed by brief explanation.  Bash commands are the code snippets, assume you have to type enter after you type in the command.  This isn’t a post for learning Bash.  Check out &lt;a href=&quot;http://nodeschool.io/&quot;&gt;learnyoubash at node school&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;steps-for-mac-users&quot;&gt;Steps for Mac users&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;google &lt;code class=&quot;highlighter-rouge&quot;&gt;download mongodb&lt;/code&gt;, click on the link near the top that says &lt;span style=&quot;font-weight: 700&quot;&gt;MongoDB Download Center | MongoDB&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Scroll down, click on the green button that says &lt;strong&gt;DOWNLOAD (tzg)&lt;/strong&gt;.  This will download the Current Stable Release, which it says if you search the page for that text. As of the first draft of this post, it was 3.2.6.  This mongo/node course uses 3.2.x&lt;/li&gt;
  &lt;li&gt;Open up a command prompt.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Downloads&lt;/code&gt; : Move into your Downloads directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lt&lt;/code&gt; List all the contents of the Downloads directory, look at what gets printed first.  It should say something like &lt;strong&gt;mongodb-osx-ssl-x86_64-3.2.6.tgz&lt;/strong&gt;.  It might be different depending on your mac, but it should definitely end with &lt;strong&gt;.tgz&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tar xvf mongobd-osx-ssl-x86_64-3.2.6.tgz&lt;/code&gt; Hint: use code completion.  Type the first few letters of the tgz file and hit the tab key.  This is un-tarring the file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd mongodb-osx-x86_64-3.2.6&lt;/code&gt; Move into the file you just expanded. Notice no tar ball extension.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; List all the contents of that mongodb directory.  Notice the &lt;strong&gt;bin&lt;/strong&gt; directory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd bin&lt;/code&gt; Move into the &lt;strong&gt;bin&lt;/strong&gt; directory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; List all the contents of the &lt;strong&gt;bin&lt;/strong&gt; directory. Notice &lt;strong&gt;mongo&lt;/strong&gt; and &lt;strong&gt;mongod&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo root&lt;/code&gt; You need to become root so you can do the next step.  This is going to let you write/read mongodb documents.  You’ll probably need to type in your password.  Don’t expect to see any characters as you type it in.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir -p /data/db&lt;/code&gt; Create the directory that mongodb by default saves its data.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 777 /data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 777 /data/db&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -ld /data/db&lt;/code&gt; You should see something like &lt;strong&gt;root&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; Get out of root&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt; You should see your computer’s username that you’re logged into.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./monngod&lt;/code&gt; This starts the MongoDB server. Notice &lt;strong&gt;on port 27017&lt;/strong&gt;.  That’s the default port, and will be more useful later when you connect the MongoDB Server through a driver.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;control + t&lt;/code&gt; or open a new tab (top menu=&amp;gt;Shell=&amp;gt;New Tab), and move into that tab for the next few commands.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; You should still be in &lt;strong&gt;bin&lt;/strong&gt;.  If you’re not, like if you’re using &lt;strong&gt;iTerm&lt;/strong&gt;, move back into it with &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads/mongodb-osx-x86_64-3.2.6/bin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./mongo&lt;/code&gt; This starts the Mongo shell.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db.names.insert({name: &quot;Your name&quot;})&lt;/code&gt;.  All this does is write to the server.  Expect to see &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteResult({ &quot;nInserted&quot; : 1 })&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db.names.find()&lt;/code&gt; You should see a json object with 2 fields: an _id field with an ObjectId, and a name field with the value you just typed.&lt;/li&gt;
  &lt;li&gt;Switch back to the tab that has the mongod server running&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;control c&lt;/code&gt; This stops the server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo root&lt;/code&gt; Become root again&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cp * /user/local/bin&lt;/code&gt; You’re copying the contents of the mongo bin directory to the &lt;strong&gt;/user/local/bin directory&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; exit root&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;which mongod&lt;/code&gt; You should see &lt;strong&gt;/usr/local/bin/mongod&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; switch back to your home directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongod&lt;/code&gt; You just started the mongod server from your home directory, which you’ll do from now on.&lt;/li&gt;
  &lt;li&gt;Switch into another tab. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;control c&lt;/code&gt; if you moved back to the tab where you had the mongo shell running before. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; so you move to home directory. &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt;. You can start a mongo shell now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion: To use the mongo shell, open command line, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mongod&lt;/code&gt;, open another command line window, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt;. You can do this from any directory&lt;/p&gt;

&lt;h3 id=&quot;additional-feedback-based-off-of-setting-up-on-mac-with-iterm&quot;&gt;Additional feedback based off of setting up on Mac with iTerm:&lt;/h3&gt;
&lt;p&gt;When I tried ths on iTerm, I got stuck on step 11.  My work computer is a little older than my personal mac (2011 vs. 2014), and is running OS X 10.11.5  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo root&lt;/code&gt; wouldn’t work on my work computer.  This didn’t matter if it was on Terminal or iTerm.  I digged around a little bit: I enabled root user from this &lt;a href=&quot;https://www.youtube.com/watch?v=qTtVhAEAs2Q&quot;&gt;youtube video&lt;/a&gt; but couldn’t figure out how to become root user, then I read into how El Capitan is ‘rootless’ from this blog post: &lt;a href=&quot;http://apple.stackexchange.com/questions/193368/what-is-the-rootless-feature-in-el-capitan-really&quot;&gt;http://apple.stackexchange.com/questions/193368/what-is-the-rootless-feature-in-el-capitan-really&lt;/a&gt;, but then I found the solution that was a lot easier than going through the 31 steps above: &lt;strong&gt;Use homebrew&lt;/strong&gt;.  Follow the steps on &lt;a href=&quot;http://www.hacksparrow.com/how-to-install-mongodb-on-mac-os-x.html&quot;&gt;this blog&lt;/a&gt; for a much faster approach to getting going with mongo. Otherwise, no significant insites on using iTerm.  I just need to dig into the documentation and get it working as well as my personal set up on Terminal with &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh my zsh&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-pc-users&quot;&gt;Setting up for PC Users&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Google &lt;code class=&quot;highlighter-rouge&quot;&gt;download mongo&lt;/code&gt; just like for mac, select the same website.  The site detects if you’re on a Mac or PC, so locate the most recent stable release and download the 64 bit version.&lt;/li&gt;
  &lt;li&gt;Switch to explorer and open into Downloads.  Unzip the MongoDB file.&lt;/li&gt;
  &lt;li&gt;Create a new directory and move the mongodb file from Downloads into that file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir data/db&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;From the folder you moved the mongodb contents, you should be able to start the mongo server with &lt;code class=&quot;highlighter-rouge&quot;&gt;mongod&lt;/code&gt; and in a separate bash window, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt; to start the shell.  That’s it.  Test out the shell with a write and read.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/recipe-for-starting-mongod</link>
        <guid isPermaLink="true">http://localhost:4000/recipe-for-starting-mongod</guid>
        
        
      </item>
    
      <item>
        <title>Multi-step Forms</title>
        <description>&lt;p&gt;How do you create a form where you can navigate to multiple pages, and are able to submit the data only once?&lt;/p&gt;

&lt;p&gt;Should you have a single controller connected to multiple views?&lt;/p&gt;

&lt;p&gt;What’s an approach that takes advantage of the best parts of Angular 1.x?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nathan-j-brenner/multipage-form&quot; class=&quot;btn btn-info&quot; role=&quot;button&quot;&gt;See the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I got hired a couple months ago as a contractor for an advertising agency to write responsive html emails. Not exciting work, no javascript, and table based layout, but I get to write code all day so what’s to complain?&lt;/p&gt;

&lt;p&gt;I’ve gotten a lot better at writting css, to the point where I can get emails done fairly quickly in part because a lot of the templates were built by me.  When I have time to spare, I’ve enjoyed refactoring an internal app, and in the last few days I made a breakthrough.&lt;/p&gt;

&lt;p&gt;For some backstory, the app was created by a senior dev, and there was a note in code that said “To future developer, I’m learning angular, so if this doesn’t look that great, sorry, enjoy fixing it”.  That’s not verbatim, but it was kinda the point, and after working on an ionic app with ng1.4.x in TypeScript, I had gotten used to some conventions and what some may call writing the angular way, like not using jQuery in an Angular app, or keeping a clearly defined line between server side code and client side code.  This blog will focus on how I drafted a solution to that separation, which in large part was made through using services.&lt;/p&gt;

&lt;p&gt;So imagine an angular app, perhaps one that you’ve written, and you’ve only got one controller.  You’re not really sure what the situation would look like to justify multiple controllers, so you’re single controller has a lot of code in it.  In my case, the app is a multipage form, and after digging around at some blogs, I found where the author got his inspiration: &lt;a href=&quot;https://scotch.io/tutorials/angularjs-multi-step-form-using-ui-router&quot;&gt;https://scotch.io/tutorials/angularjs-multi-step-form-using-ui-router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wasn’t a big fan of this approach, and recently I’ve been thinking about some significant conventions such as how controllers should be kept slim, controllers should be limited to a single view, and services should be used to handle data.  In this case, I wanted to take the existing app, and create an individual controller per view, and to pass along the data in each controller along each step.  More specifically, the submit button on each page would send the data of that controller to a service, along with navigating to the next state.&lt;/p&gt;

&lt;p&gt;If you want to see the demo of where the app currently stands, clone &lt;a href=&quot;https://github.com/nathan-j-brenner/multipage-form&quot;&gt;this repo&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;.  Sorry, nothing live yet, I kinda forgot how to generate it on GitHub, and this might be a good oppertunity to play with &lt;a href=&quot;https://zeit.co/now&quot;&gt;Now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, I found this blog: &lt;a href=&quot;https://thinkster.io/a-better-way-to-learn-angularjs/services&quot;&gt;https://thinkster.io/a-better-way-to-learn-angularjs/services&lt;/a&gt;, and I put it together so I could see it in practice and reference as I refactored the app in the office from my gitHub repo &lt;a href=&quot;https://github.com/nathan-j-brenner/sharedData&quot;&gt;sharedData&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hardly slept that night because I was so excited to finally slim down the massive single controller, but when I got to work, I remembered that the author was using &lt;code class=&quot;highlighter-rouge&quot;&gt;angular-ui-router&lt;/code&gt;, more specifically embedded routes.  There was the main route: &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt;, with a controller, then all the sub-routes.  I had played with the ui-router before, but taking something existing, and refactoring to this extent required some time to look at the documentation, play around with it, and build a small version of what I wanted to do.  Unfortunately, that was partly Saturday afternoon (after brewing beer), and Sunday afternoon. The result was this app: &lt;a href=&quot;https://github.com/nathan-j-brenner/multipage-form&quot;&gt;multipage-form&lt;/a&gt;.  It’s all front-end, and I used John Papa’s &lt;code class=&quot;highlighter-rouge&quot;&gt;lite-server&lt;/code&gt; (on npm), so I could debug with &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-inspector&lt;/code&gt;.  It really came out of taking the &lt;a href=&quot;https://angular-ui.github.io/ui-router/&quot;&gt;Getting Started&lt;/a&gt; guide for the UI-router, and combining it  with the thinkster blog. A lot of it was piece by piece refactoring from the services app and unit testing (going to the browser and seeing if the tiny change gave me what I expected, and debugging when it didn’t.  When I had the behavior I wanted, I tried thinking of something fun to integrate it with, and somehow Monty Python came to mind.  That brought in an additional service for the questions, and I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; object to randomly generate the third question, along with slimming down the &lt;code class=&quot;highlighter-rouge&quot;&gt;Responses&lt;/code&gt; Service, and the Controllers so they each basically had the same code, but were bound to separate views.&lt;/p&gt;

&lt;p&gt;So there were two huge gains in writting this app that took about 4 hours: I gained a stronger understanding of how to implement services and how to write slim controllers, which I’ll directly apply on a larger app tomorrow, and how to use use some other conventions, like not using &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; at all (I think one of the two apps I started with used it.  But the biggest take-away that I was lacking from Friday morning was…Each state not only required it’s own controller, but the states couldn’t be embedded.  Each state had to be it’s own separate form that had it’s own properties, and when you’re ready to move onto the next state of the form, you had to do two things: Change state with &lt;code class=&quot;highlighter-rouge&quot;&gt;$tate.go()&lt;/code&gt;, and define the properties on the service that was being used in each state of the form.  After all the questions of the form, there’s a view that shows all the data that was collected (which is retrieved with a controller), and has a submit function, at which point the Service would make a post request to the API, but in this case it just shoots out an alert box with an appropriate response. Next is a Submittion state, which just verifies that you’ve completed the form and requests that you start the process all over again, where the data is reset and the state goes back to the first page of the form.&lt;/p&gt;

&lt;p&gt;Where to next? The goal was to make a small app, basically a prototype, so I can debug myself on the larger app, and more sequentially move through this refactoring.  But there’s other improvements I’d like to do with this app: I’ve been playing with the ng Form validation, so that’ll probably be the next thing I add into this app before I put it in every state of the app at work.  I’d like to bring in Webpack, and I think I’ll probably use a &lt;a href=&quot;http://blog.teamtreehouse.com/26017-2&quot;&gt;blog&lt;/a&gt;from a developer I’ve worked with in the past.  Adding unit tests would be good, and so would trying out the navigating from ng1 to ng2 through ngForward.  I’d love to look at the ng1 version next to the ng2, especially with the good things I’ve been hearing about forms.  And rewriting the same app with Typescript as also been on my mind.  I started doing that on Friday, but there was too much about Typescript that I wasn’t used to, so I kept the focus in on what I would need to do to refactor that app as it currently stands.&lt;/p&gt;

&lt;p&gt;All in all, this was a project I created so I could create more form-apps in the future without reinventing the wheel.  Using paper forms, like at the dmv or doctor’s offices, or at restraunts drives me nuts.  I’d love to walk down the street frommy house to the small-business sushi restraunt and offer them something like this so I can order sushi easier, and maybe they can see a roi.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/multipage-form</link>
        <guid isPermaLink="true">http://localhost:4000/multipage-form</guid>
        
        
      </item>
    
      <item>
        <title>Refactoring from $scope to vm in ng1.x</title>
        <description>&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; brings on some issues, which is evident as it’s been taken out of Angular2.  With your existing Angular 1.x apps, one of the ways you can refactor is to strip out all instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s three steps you need to take for this to work:&lt;/p&gt;

&lt;h4 id=&quot;first&quot;&gt;First&lt;/h4&gt;

&lt;p&gt;Change the declarations of your controllers from the name they have to &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;.  VM represents view-model, and is a convention that’s a part of the John Papa Angular styleguide.&lt;/p&gt;

&lt;p&gt;For example, within an app, where you have a controller such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div ng-controller=&quot;mainController&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change it to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div ng-controller=&quot;mainController as vm&quot;&amp;gt;&amp;lt;/div&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you declared your routing, such as with the &lt;code class=&quot;highlighter-rouge&quot;&gt;angular-ui-router&lt;/code&gt;, you might have&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$routeProvider.state( &quot;main&quot;, {
	url: &quot;/main&quot;,
	templateUrl: &quot;./templates/main.html&quot;,
	controller: &quot;mainController&quot;
	});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change the last line to &lt;code class=&quot;highlighter-rouge&quot;&gt;controller: mainController as vm&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;second&quot;&gt;Second&lt;/h4&gt;

&lt;p&gt;Within your views, every time you have a property, such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng-model = &quot;name&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;reference the property as part of vm, which in this case would look like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng-model= &quot;vm.name&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;third&quot;&gt;Third&lt;/h4&gt;

&lt;p&gt;Within the controller, declare &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; as a variable set to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, then replace &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; everywhere you have &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, given this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module('app').controller('MainController', MainController);

function MainController($scope) {
	$scope.numb = 5;
	$scope.add = function(){ 
		$scope.numb += 1;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module('app').controller('MainController', MainController);

function MainController() {
	var vm = this;
	vm.numb = 5;
	vm.add = function(){
		vm.numb += 1;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s plenty of blogs about why you should get off the habit of using &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;, and there’s justifications for using &lt;code class=&quot;highlighter-rouge&quot;&gt;ctlr&lt;/code&gt; in place of &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; for the controller as syntax.  Bottom line, it looks cleaner, it’s easier to use, and you don’t have to work with embedded scopes.&lt;/p&gt;

&lt;p&gt;I had heard of using &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; syntax before, and how John Papa was a strong advocate for it, but it took me figuring out on my own how to effectively make this shift. Ironically, here’s a blog he did that looks like it covers the same premise, and proably goes into more depth: &lt;a href=&quot;http://johnpapa.net/angularjss-controller-as-and-the-vm-variable/&quot;&gt;http://johnpapa.net/angularjss-controller-as-and-the-vm-variable/&lt;/a&gt;
Also, if you’re learning angular 1, interested in learning angular2 and trying to see the connective glue between ng1 and ng2, or have some existing apps and you’re trying to find work but you keep getting told you’re code isn’t good enough, try refactoring some of it to these conventions: &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;https://github.com/johnpapa/angular-styleguide&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/$scope-to-vm</link>
        <guid isPermaLink="true">http://localhost:4000/$scope-to-vm</guid>
        
        
      </item>
    
      <item>
        <title>ExpressWorks with Typescript</title>
        <description>&lt;p&gt;Typescript is a superset of Javascript. It’s a transpiler for es6 to es5 and offers typechecking, which you don’t get with Babel.  However, there’s some configuration and some weird terminology. It’s easy for me to forget some of this stuff, so I like to use the node school workshops as an oppertunity to expand my understanding, which is a bonus: I get to learn the content in the workshops, and I get to learn and practice es6.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-like-writing-typescript-instead-of-plain-javascript&quot;&gt;Why do I like writing typescript instead of plain javascript?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Code completion: As soon as I start typing a reference to an object, such as jQuery &lt;code class=&quot;highlighter-rouge&quot;&gt;$.&lt;/code&gt;, I get a modal window with the list of possible methods or properties I can use with helpful information like the definition and the parameters. I can select any of them and get tab completion.&lt;/li&gt;
  &lt;li&gt;Code-smart spell checking: If I misspell something, if I assign a property or method to the wrong type, or if I give the wrong type, such as providing a number instead of a string as an argument to a function, I get feedback in the editor just like I do with the red lines in word processors.&lt;/li&gt;
  &lt;li&gt;I get to write State-of-the art code instead of state-of-the-web, which means I’m also learning more about es6 syntax and learning more about javascript.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heres-the-steps-read-on-for-the-explantion&quot;&gt;Here’s the steps, read on for the explantion.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nathan-j-brenner/node_school/tree/master/ts_expressworks&quot;&gt;git directory&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;complete-before-you-start-a-node-school-workshop&quot;&gt;Complete before you start a node school workshop:&lt;/h4&gt;
&lt;p&gt;install node/npm&lt;br /&gt;
npm install -g typescript&lt;br /&gt;
npm install -g tsd&lt;/p&gt;

&lt;h4 id=&quot;specifics-for-everyworkshop-but-more-specific-for-express&quot;&gt;Specifics for everyworkshop, but more specific for Express:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir expressworks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir dist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, add in &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt;:   &lt;br /&gt;
 “tsc”: “tsc”,
 “tsc:w”: “tsc -w –outDir dist”,
 “start”: “npm run tsc:w”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch tsconfig.json&lt;/code&gt;¸&lt;/li&gt;
  &lt;li&gt;Add in your compiler options, such as:&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;{  
     &quot;compilerOptions&quot;: {  
         &quot;module&quot;: &quot;commonjs&quot;,
         &quot;target&quot;: &quot;es5&quot;,  
         &quot;noImplicitAny&quot;: true,  
         &quot;removeComments&quot;: true  
     }  
 }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsd install express -S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install express -S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g expressworks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsd rebundle&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch 1-hello-world.ts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;First line of 1-hello-world.ts: &lt;code class=&quot;highlighter-rouge&quot;&gt;/// &amp;lt;reference path=&quot;typings/tsd.d.ts&quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Write the solution&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;create another tab in your terminal, &lt;code class=&quot;highlighter-rouge&quot;&gt;cd dist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expressworks 1-hello-world.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-why&quot;&gt;The why:&lt;/h2&gt;
&lt;p&gt;before: Installing &lt;code class=&quot;highlighter-rouge&quot;&gt;typescript&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tsd&lt;/code&gt; globally lets you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc&lt;/code&gt; commands in the terminal.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;With nodeschool courses, I like to write the course name as the directory.  All of the courses I’ve worked on are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_school&lt;/code&gt; directory, and they serve as code examples for future reference. I don’t get a lot of time to work on these, it’s usually a couple minutes in the middle of the day when I’m waiting on feedback from qa or I’ve got some time in the weekend when my son is napping.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dist is the directory for all javascript files.  Call it what you want, I like the idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directories, but the only thing in it is &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m going to be using npm modules, so every module I install, I do this first, then add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; flag so it get’s saved into &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This seems to be a realiable way for me accomplish two things: The &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ts&lt;/code&gt; files are separated from the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; files, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ts&lt;/code&gt; files get compiled in the background to &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; so I don’t have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc *.js&lt;/code&gt; over and over.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; keeps your configuration on how you want typescript to work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This installs a typed definition file of the express framework, so you get access to all those methods and properties when you want them in the ts files. This creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;typings&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look at &lt;code class=&quot;highlighter-rouge&quot;&gt;./typings/express.d.ts&lt;/code&gt; for which version of express has been defined.  Npm install that version.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the node school workshop. This can be done at any time, I just like doing it here because I’m about to start working on the workshop.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any time you add new module definitons, you’ll need to rebundle tds so your ts files will know where to look for references of definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So I can get tab completion, I like to name my workshop exercises as &lt;code class=&quot;highlighter-rouge&quot;&gt;number-workshop_expercise.ts&lt;/code&gt;, so when I’m ready to verify it, I can just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;workshop verify number tab&lt;/code&gt;. Since the exercises scaffold upon eachother, this is an easy way to keep them appearing in order in the directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first line of every ts file needs to have this text, otherwise when you complile the ts, you’ll get an error that says that typescript doesn’t know about these external files, even though it works fine in the editor and the js files will pass if you have the correct solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sorry, no freebes, but you wouldn’t have to look hard for them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This starts the compiler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep the compiler running, and move into the js files directory so you can check the solutions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 17 Apr 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/TS_expressworks</link>
        <guid isPermaLink="true">http://localhost:4000/TS_expressworks</guid>
        
        
      </item>
    
  </channel>
</rss>
