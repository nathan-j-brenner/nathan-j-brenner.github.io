<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nathan Brenner</title>
    <description>A sample of my work and thoughts</description>
    <link>http://nathan-j-brenner.github.io//</link>
    <atom:link href="http://nathan-j-brenner.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 May 2016 14:57:02 -0700</pubDate>
    <lastBuildDate>Tue, 17 May 2016 14:57:02 -0700</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Recipe For Starting Mongod</title>
        <description>&lt;hr /&gt;
&lt;p&gt;layout: post
title: “Recipe for starting MongoD”
date : 2016-05-08
—&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A couple posts ago, I made a ‘recipe’ for creating a typescript project with node.js.  I’ve actually used that a few times, and I’ve gotten some feedback from other devs that liked it, so this is another one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m a ta for a MongoDB University course with node.js that starts soon.  Part of that means I’ll be previewing the materials before the students have access so I can offer suggestions to the instructors, and the other part means I’ll be closely watching the forum so I can break blockers as they come up.  So I’m taking notes as I watch the video as an adjudicator to the course materials, to guess possible student questions, and to expand my understanding of MongoDB.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;format&quot;&gt;Format&lt;/h2&gt;
&lt;p&gt;The first few steps involve the browser, then they switch to a lot of bash commands in the terminal.  I’ve gotten MongoDB running on PCs, I’ve used Bash with some luck although I haven’t tried it on Windows 10 yet, and I’ve used Mac default Terminal (which I prefer), and iTerm.  I’m now using iTerm on my day job computer, and I haven’t tried that (maybe tomorrow, fingers crossed some fires stay out), so this post will get updated.&lt;/p&gt;

&lt;p&gt;Basically Bash command will be followed by brief explanation.  Bash commands are the code snippets, assume you have to type enter after you type in the command.  This isn’t a post for learning Bash.  Check out &lt;a href=&quot;http://nodeschool.io/&quot;&gt;learnyoubash at node school&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;steps-for-mac-users&quot;&gt;Steps for Mac users&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;google &lt;code class=&quot;highlighter-rouge&quot;&gt;download mongodb&lt;/code&gt;, click on the link near the top that says &lt;span style=&quot;font-weight: 700&quot;&gt;MongoDB Download Center | MongoDB&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Scroll down, click on the green button that says &lt;strong&gt;DOWNLOAD (tzg)&lt;/strong&gt;.  This will download the Current Stable Release, which it says if you search the page for that text. As of the first draft of this post, it was 3.2.6.  This mongo/node course uses 3.2.x&lt;/li&gt;
  &lt;li&gt;Open up a command prompt.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Downloads&lt;/code&gt; : Move into your Downloads directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lt&lt;/code&gt; List all the contents of the Downloads directory, look at what gets printed first.  It should say something like &lt;strong&gt;mongodb-osx-ssl-x86_64-3.2.6.tgz&lt;/strong&gt;.  It might be different depending on your mac, but it should definitely end with &lt;strong&gt;.tgz&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tar xvf mongobd-osx-ssl-x86_64-3.2.6.tgz&lt;/code&gt; Hint: use code completion.  Type the first few letters of the tgz file and hit the tab key.  This is un-tarring the file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd mongodb-osx-x86_64-3.2.6&lt;/code&gt; Move into the file you just expanded. Notice no tar ball extension.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; List all the contents of that mongodb directory.  Notice the &lt;strong&gt;bin&lt;/strong&gt; directory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd bin&lt;/code&gt; Move into the &lt;strong&gt;bin&lt;/strong&gt; directory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; List all the contents of the &lt;strong&gt;bin&lt;/strong&gt; directory. Notice &lt;strong&gt;mongo&lt;/strong&gt; and &lt;strong&gt;mongod&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo root&lt;/code&gt; You need to become root so you can do the next step.  This is going to let you write/read mongodb documents.  You’ll probably need to type in your password.  Don’t expect to see any characters as you type it in.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir -p /data/db&lt;/code&gt; Create the directory that mongodb by default saves its data.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 777 /data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 777 /data/db&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -ld /data/db&lt;/code&gt; You should see something like &lt;strong&gt;root&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; Get out of root&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt; You should see your computer’s username that you’re logged into.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./monngod&lt;/code&gt; This starts the MongoDB server. Notice &lt;strong&gt;on port 27017&lt;/strong&gt;.  That’s the default port, and will be more useful later when you connect the MongoDB Server through a driver.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;control + t&lt;/code&gt; or open a new tab (top menu=&amp;gt;Shell=&amp;gt;New Tab), and move into that tab for the next few commands.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; You should still be in &lt;strong&gt;bin&lt;/strong&gt;.  If you’re not, like if you’re using &lt;strong&gt;iTerm&lt;/strong&gt;, move back into it with &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Downloads/mongodb-osx-x86_64-3.2.6/bin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./mongo&lt;/code&gt; This starts the Mongo shell.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db.names.insert({name: &quot;Your name&quot;})&lt;/code&gt;.  All this does is write to the server.  Expect to see &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteResult({ &quot;nInserted&quot; : 1 })&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db.names.find()&lt;/code&gt; You should see a json object with 2 fields: an _id field with an ObjectId, and a name field with the value you just typed.&lt;/li&gt;
  &lt;li&gt;Switch back to the tab that has the mongod server running&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;control c&lt;/code&gt; This stops the server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo root&lt;/code&gt; Become root again&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cp * /user/local/bin&lt;/code&gt; You’re copying the contents of the mongo bin directory to the &lt;strong&gt;/user/local/bin directory&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; exit root&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;which mongod&lt;/code&gt; You should see &lt;strong&gt;/usr/local/bin/mongod&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; switch back to your home directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongod&lt;/code&gt; You just started the mongod server from your home directory, which you’ll do from now on.&lt;/li&gt;
  &lt;li&gt;Switch into another tab. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;control c&lt;/code&gt; if you moved back to the tab where you had the mongo shell running before. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; so you move to home directory. &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt;. You can start a mongo shell now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion: To use the mongo shell, open command line, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mongod&lt;/code&gt;, open another command line window, run &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt;. You can do this from any directory&lt;/p&gt;

&lt;h3 id=&quot;additional-feedback-based-off-of-setting-up-on-mac-with-iterm&quot;&gt;Additional feedback based off of setting up on Mac with iTerm:&lt;/h3&gt;
&lt;p&gt;When I tried ths on iTerm, I got stuck on step 11.  My work computer is a little older than my personal mac (2011 vs. 2014), and is running OS X 10.11.5  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo root&lt;/code&gt; wouldn’t work on my work computer.  This didn’t matter if it was on Terminal or iTerm.  I digged around a little bit: I enabled root user from this &lt;a href=&quot;https://www.youtube.com/watch?v=qTtVhAEAs2Q&quot;&gt;youtube video&lt;/a&gt; but couldn’t figure out how to become root user, then I read into how El Capitan is ‘rootless’ from this blog post: &lt;a href=&quot;http://apple.stackexchange.com/questions/193368/what-is-the-rootless-feature-in-el-capitan-really&quot;&gt;http://apple.stackexchange.com/questions/193368/what-is-the-rootless-feature-in-el-capitan-really&lt;/a&gt;, but then I found the solution that was a lot easier than going through the 31 steps above: &lt;strong&gt;Use homebrew&lt;/strong&gt;.  Follow the steps on &lt;a href=&quot;http://www.hacksparrow.com/how-to-install-mongodb-on-mac-os-x.html&quot;&gt;this blog&lt;/a&gt; for a much faster approach to getting going with mongo. Otherwise, no significant insites on using iTerm.  I just need to dig into the documentation and get it working as well as my personal set up on Terminal with &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh my zsh&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-for-pc-users&quot;&gt;Setting up for PC Users&lt;/h2&gt;
&lt;p&gt;Coming soon…&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//recipe-for-starting-mongod</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//recipe-for-starting-mongod</guid>
        
        
      </item>
    
      <item>
        <title>Multi-step Forms</title>
        <description>&lt;p&gt;How do you create a form where you can navigate to multiple pages, and are able to submit the data only once?&lt;/p&gt;

&lt;p&gt;Should you have a single controller connected to multiple views?&lt;/p&gt;

&lt;p&gt;What’s an approach that takes advantage of the best parts of Angular 1.x?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nathan-j-brenner/multipage-form&quot; class=&quot;btn btn-info&quot; role=&quot;button&quot;&gt;See the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I got hired a couple months ago as a contractor for an advertising agency to write responsive html emails. Not exciting work, no javascript, and table based layout, but I get to write code all day so what’s to complain?&lt;/p&gt;

&lt;p&gt;I’ve gotten a lot better at writting css, to the point where I can get emails done fairly quickly in part because a lot of the templates were built by me.  When I have time to spare, I’ve enjoyed refactoring an internal app, and in the last few days I made a breakthrough.&lt;/p&gt;

&lt;p&gt;For some backstory, the app was created by a senior dev, and there was a note in code that said “To future developer, I’m learning angular, so if this doesn’t look that great, sorry, enjoy fixing it”.  That’s not verbatim, but it was kinda the point, and after working on an ionic app with ng1.4.x in TypeScript, I had gotten used to some conventions and what some may call writing the angular way, like not using jQuery in an Angular app, or keeping a clearly defined line between server side code and client side code.  This blog will focus on how I drafted a solution to that separation, which in large part was made through using services.&lt;/p&gt;

&lt;p&gt;So imagine an angular app, perhaps one that you’ve written, and you’ve only got one controller.  You’re not really sure what the situation would look like to justify multiple controllers, so you’re single controller has a lot of code in it.  In my case, the app is a multipage form, and after digging around at some blogs, I found where the author got his inspiration: &lt;a href=&quot;https://scotch.io/tutorials/angularjs-multi-step-form-using-ui-router&quot;&gt;https://scotch.io/tutorials/angularjs-multi-step-form-using-ui-router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wasn’t a big fan of this approach, and recently I’ve been thinking about some significant conventions such as how controllers should be kept slim, controllers should be limited to a single view, and services should be used to handle data.  In this case, I wanted to take the existing app, and create an individual controller per view, and to pass along the data in each controller along each step.  More specifically, the submit button on each page would send the data of that controller to a service, along with navigating to the next state.&lt;/p&gt;

&lt;p&gt;If you want to see the demo of where the app currently stands, clone &lt;a href=&quot;https://github.com/nathan-j-brenner/multipage-form&quot;&gt;this repo&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;.  Sorry, nothing live yet, I kinda forgot how to generate it on GitHub, and this might be a good oppertunity to play with &lt;a href=&quot;https://zeit.co/now&quot;&gt;Now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, I found this blog: &lt;a href=&quot;https://thinkster.io/a-better-way-to-learn-angularjs/services&quot;&gt;https://thinkster.io/a-better-way-to-learn-angularjs/services&lt;/a&gt;, and I put it together so I could see it in practice and reference as I refactored the app in the office from my gitHub repo &lt;a href=&quot;https://github.com/nathan-j-brenner/sharedData&quot;&gt;sharedData&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hardly slept that night because I was so excited to finally slim down the massive single controller, but when I got to work, I remembered that the author was using &lt;code class=&quot;highlighter-rouge&quot;&gt;angular-ui-router&lt;/code&gt;, more specifically embedded routes.  There was the main route: &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt;, with a controller, then all the sub-routes.  I had played with the ui-router before, but taking something existing, and refactoring to this extent required some time to look at the documentation, play around with it, and build a small version of what I wanted to do.  Unfortunately, that was partly Saturday afternoon (after brewing beer), and Sunday afternoon. The result was this app: &lt;a href=&quot;https://github.com/nathan-j-brenner/multipage-form&quot;&gt;multipage-form&lt;/a&gt;.  It’s all front-end, and I used John Papa’s &lt;code class=&quot;highlighter-rouge&quot;&gt;lite-server&lt;/code&gt; (on npm), so I could debug with &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-inspector&lt;/code&gt;.  It really came out of taking the &lt;a href=&quot;https://angular-ui.github.io/ui-router/&quot;&gt;Getting Started&lt;/a&gt; guide for the UI-router, and combining it  with the thinkster blog. A lot of it was piece by piece refactoring from the services app and unit testing (going to the browser and seeing if the tiny change gave me what I expected, and debugging when it didn’t.  When I had the behavior I wanted, I tried thinking of something fun to integrate it with, and somehow Monty Python came to mind.  That brought in an additional service for the questions, and I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; object to randomly generate the third question, along with slimming down the &lt;code class=&quot;highlighter-rouge&quot;&gt;Responses&lt;/code&gt; Service, and the Controllers so they each basically had the same code, but were bound to separate views.&lt;/p&gt;

&lt;p&gt;So there were two huge gains in writting this app that took about 4 hours: I gained a stronger understanding of how to implement services and how to write slim controllers, which I’ll directly apply on a larger app tomorrow, and how to use use some other conventions, like not using &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; at all (I think one of the two apps I started with used it.  But the biggest take-away that I was lacking from Friday morning was…Each state not only required it’s own controller, but the states couldn’t be embedded.  Each state had to be it’s own separate form that had it’s own properties, and when you’re ready to move onto the next state of the form, you had to do two things: Change state with &lt;code class=&quot;highlighter-rouge&quot;&gt;$tate.go()&lt;/code&gt;, and define the properties on the service that was being used in each state of the form.  After all the questions of the form, there’s a view that shows all the data that was collected (which is retrieved with a controller), and has a submit function, at which point the Service would make a post request to the API, but in this case it just shoots out an alert box with an appropriate response. Next is a Submittion state, which just verifies that you’ve completed the form and requests that you start the process all over again, where the data is reset and the state goes back to the first page of the form.&lt;/p&gt;

&lt;p&gt;Where to next? The goal was to make a small app, basically a prototype, so I can debug myself on the larger app, and more sequentially move through this refactoring.  But there’s other improvements I’d like to do with this app: I’ve been playing with the ng Form validation, so that’ll probably be the next thing I add into this app before I put it in every state of the app at work.  I’d like to bring in Webpack, and I think I’ll probably use a &lt;a href=&quot;http://blog.teamtreehouse.com/26017-2&quot;&gt;blog&lt;/a&gt;from a developer I’ve worked with in the past.  Adding unit tests would be good, and so would trying out the navigating from ng1 to ng2 through ngForward.  I’d love to look at the ng1 version next to the ng2, especially with the good things I’ve been hearing about forms.  And rewriting the same app with Typescript as also been on my mind.  I started doing that on Friday, but there was too much about Typescript that I wasn’t used to, so I kept the focus in on what I would need to do to refactor that app as it currently stands.&lt;/p&gt;

&lt;p&gt;All in all, this was a project I created so I could create more form-apps in the future without reinventing the wheel.  Using paper forms, like at the dmv or doctor’s offices, or at restraunts drives me nuts.  I’d love to walk down the street frommy house to the small-business sushi restraunt and offer them something like this so I can order sushi easier, and maybe they can see a roi.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//multipage-form</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//multipage-form</guid>
        
        
      </item>
    
      <item>
        <title>Refactoring from $scope to vm in ng1.x</title>
        <description>&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; brings on some issues, which is evident as it’s been taken out of Angular2.  With your existing Angular 1.x apps, one of the ways you can refactor is to strip out all instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s three steps you need to take for this to work:&lt;/p&gt;

&lt;h4 id=&quot;first&quot;&gt;First&lt;/h4&gt;

&lt;p&gt;Change the declarations of your controllers from the name they have to &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;.  VM represents view-model, and is a convention that’s a part of the John Papa Angular styleguide.&lt;/p&gt;

&lt;p&gt;For example, within an app, where you have a controller such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div ng-controller=&quot;mainController&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;change it to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div ng-controller=&quot;mainController as vm&quot;&amp;gt;&amp;lt;/div&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you declared your routing, such as with the &lt;code class=&quot;highlighter-rouge&quot;&gt;angular-ui-router&lt;/code&gt;, you might have&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$routeProvider.state( &quot;main&quot;, {
	url: &quot;/main&quot;,
	templateUrl: &quot;./templates/main.html&quot;,
	controller: &quot;mainController&quot;
	});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Change the last line to &lt;code class=&quot;highlighter-rouge&quot;&gt;controller: mainController as vm&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;second&quot;&gt;Second&lt;/h4&gt;

&lt;p&gt;Within your views, every time you have a property, such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng-model = &quot;name&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;reference the property as part of vm, which in this case would look like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng-model= &quot;vm.name&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;third&quot;&gt;Third&lt;/h4&gt;

&lt;p&gt;Within the controller, declare &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; as a variable set to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, then replace &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; everywhere you have &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, given this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module(&#39;app&#39;).controller(&#39;MainController&#39;, MainController);

function MainController($scope) {
	$scope.numb = 5;
	$scope.add = function(){ 
		$scope.numb += 1;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Change to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module(&#39;app&#39;).controller(&#39;MainController&#39;, MainController);

function MainController() {
	var vm = this;
	vm.numb = 5;
	vm.add = function(){
		vm.numb += 1;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s plenty of blogs about why you should get off the habit of using &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;, and there’s justifications for using &lt;code class=&quot;highlighter-rouge&quot;&gt;ctlr&lt;/code&gt; in place of &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; for the controller as syntax.  Bottom line, it looks cleaner, it’s easier to use, and you don’t have to work with embedded scopes.&lt;/p&gt;

&lt;p&gt;I had heard of using &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; syntax before, and how John Papa was a strong advocate for it, but it took me figuring out on my own how to effectively make this shift. Ironically, here’s a blog he did that looks like it covers the same premise, and proably goes into more depth: &lt;a href=&quot;http://johnpapa.net/angularjss-controller-as-and-the-vm-variable/&quot;&gt;http://johnpapa.net/angularjss-controller-as-and-the-vm-variable/&lt;/a&gt;
Also, if you’re learning angular 1, interested in learning angular2 and trying to see the connective glue between ng1 and ng2, or have some existing apps and you’re trying to find work but you keep getting told you’re code isn’t good enough, try refactoring some of it to these conventions: &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;https://github.com/johnpapa/angular-styleguide&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//$scope-to-vm</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//$scope-to-vm</guid>
        
        
      </item>
    
      <item>
        <title>ExpressWorks with Typescript</title>
        <description>&lt;p&gt;Typescript is a superset of Javascript. It’s a transpiler for es6 to es5 and offers typechecking, which you don’t get with Babel.  However, there’s some configuration and some weird terminology. It’s easy for me to forget some of this stuff, so I like to use the node school workshops as an oppertunity to expand my understanding, which is a bonus: I get to learn the content in the workshops, and I get to learn and practice es6.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-like-writing-typescript-instead-of-plain-javascript&quot;&gt;Why do I like writing typescript instead of plain javascript?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Code completion: As soon as I start typing a reference to an object, such as jQuery &lt;code class=&quot;highlighter-rouge&quot;&gt;$.&lt;/code&gt;, I get a modal window with the list of possible methods or properties I can use with helpful information like the definition and the parameters. I can select any of them and get tab completion.&lt;/li&gt;
  &lt;li&gt;Code-smart spell checking: If I misspell something, if I assign a property or method to the wrong type, or if I give the wrong type, such as providing a number instead of a string as an argument to a function, I get feedback in the editor just like I do with the red lines in word processors.&lt;/li&gt;
  &lt;li&gt;I get to write State-of-the art code instead of state-of-the-web, which means I’m also learning more about es6 syntax and learning more about javascript.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heres-the-steps-read-on-for-the-explantion&quot;&gt;Here’s the steps, read on for the explantion.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nathan-j-brenner/node_school/tree/master/ts_expressworks&quot;&gt;git directory&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;complete-before-you-start-a-node-school-workshop&quot;&gt;Complete before you start a node school workshop:&lt;/h4&gt;
&lt;p&gt;install node/npm&lt;br /&gt;
npm install -g typescript&lt;br /&gt;
npm install -g tsd&lt;/p&gt;

&lt;h4 id=&quot;specifics-for-everyworkshop-but-more-specific-for-express&quot;&gt;Specifics for everyworkshop, but more specific for Express:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir expressworks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir dist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, add in &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt;:   &lt;br /&gt;
 “tsc”: “tsc”,
 “tsc:w”: “tsc -w –outDir dist”,
 “start”: “npm run tsc:w”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch tsconfig.json&lt;/code&gt;¸&lt;/li&gt;
  &lt;li&gt;Add in your compiler options, such as:&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;noImplicitAny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;removeComments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsd install express -S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install express -S&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g expressworks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsd rebundle&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch 1-hello-world.ts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;First line of 1-hello-world.ts: &lt;code class=&quot;highlighter-rouge&quot;&gt;/// &amp;lt;reference path=&quot;typings/tsd.d.ts&quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Write the solution&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;create another tab in your terminal, &lt;code class=&quot;highlighter-rouge&quot;&gt;cd dist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expressworks 1-hello-world.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-why&quot;&gt;The why:&lt;/h2&gt;
&lt;p&gt;before: Installing &lt;code class=&quot;highlighter-rouge&quot;&gt;typescript&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tsd&lt;/code&gt; globally lets you run the &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc&lt;/code&gt; commands in the terminal.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;With nodeschool courses, I like to write the course name as the directory.  All of the courses I’ve worked on are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_school&lt;/code&gt; directory, and they serve as code examples for future reference. I don’t get a lot of time to work on these, it’s usually a couple minutes in the middle of the day when I’m waiting on feedback from qa or I’ve got some time in the weekend when my son is napping.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dist is the directory for all javascript files.  Call it what you want, I like the idea of &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directories, but the only thing in it is &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m going to be using npm modules, so every module I install, I do this first, then add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; flag so it get’s saved into &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This seems to be a realiable way for me accomplish two things: The &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ts&lt;/code&gt; files are separated from the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; files, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ts&lt;/code&gt; files get compiled in the background to &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; so I don’t have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc *.js&lt;/code&gt; over and over.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; keeps your configuration on how you want typescript to work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This installs a typed definition file of the express framework, so you get access to all those methods and properties when you want them in the ts files. This creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;typings&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look at &lt;code class=&quot;highlighter-rouge&quot;&gt;./typings/express.d.ts&lt;/code&gt; for which version of express has been defined.  Npm install that version.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the node school workshop. This can be done at any time, I just like doing it here because I’m about to start working on the workshop.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any time you add new module definitons, you’ll need to rebundle tds so your ts files will know where to look for references of definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So I can get tab completion, I like to name my workshop exercises as &lt;code class=&quot;highlighter-rouge&quot;&gt;number-workshop_expercise.ts&lt;/code&gt;, so when I’m ready to verify it, I can just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;workshop verify number tab&lt;/code&gt;. Since the exercises scaffold upon eachother, this is an easy way to keep them appearing in order in the directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The first line of every ts file needs to have this text, otherwise when you complile the ts, you’ll get an error that says that typescript doesn’t know about these external files, even though it works fine in the editor and the js files will pass if you have the correct solution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sorry, no freebes, but you wouldn’t have to look hard for them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This starts the compiler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep the compiler running, and move into the js files directory so you can check the solutions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 17 Apr 2016 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//TS_expressworks</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//TS_expressworks</guid>
        
        
      </item>
    
      <item>
        <title>Takeaways from Mongo University</title>
        <description>&lt;p&gt;Over the last 7 weeks, I worked through the MongoDB course for Node.js developers.  This is a free course offered online, and I learned a lot more than I expected.&lt;/p&gt;

&lt;p&gt;Before I started the course, I knew that MongoDB was a NoSQL database system.  SQL databases, such as MySQL and PostgreSQL, use tables much like how Microsoft Excel appears, to represent and maintain persistent data.  MongoDB doesn’t use that table system, and instead builds records based on JSON, or javasript Obect Notation. I could start a mongoD and mongo shell on my computer, and I had used Orchestrate on some projects. Orchestrate.io is a cloud based database system similar to Mongo, and is fairly easy to use. More of my time with databases had been spent with Postgresql, so I could insert data into a document, and configure a schema.&lt;/p&gt;

&lt;p&gt;What I was hopeing to get out of the course was to become much more familiar and comfortable with crud operations.  CRUD are the operations for databases.  Create, Read, Update, Delete: Create a new record, query that record, make changes to that record, and remove that record from the database.  I really wanted to have a strong understanding on how to do something like create a user login, and over the period of the course I realized that I wanted to know more about Node.js and writing backend code.&lt;/p&gt;

&lt;p&gt;Each week, at 9am on Tuesday, a slew of videos (ranging from 1 minute long to 12 minutes long) with short quizzes, and a few homework assignments (between 3 and 5) were made available on their learning management system.  The videos were on youtube, and there was a discussion view for students to post questions.  With most of the homework, there was evidence if the answer would be valid, and all the quizz answers were explained in detail.  On the final week, 10 questions were posted .  Throughout the course, some of the assessment was multiple choice, some used MongoProc (which ran tests on your database), and some required an answer or a validation code.&lt;/p&gt;

&lt;p&gt;The first week was introduction.  Topics covered were installation, starting the MongoD instance, the Mongo shell, and an introducion to the Node Express server.&lt;/p&gt;

&lt;p&gt;The second week covered CRUD.  With MongoDB, a query is called by the db.collection followed by an opperation.  From the shell, db is already specified since you are already in a database, which you can specify.  Collections are a group of records, or documents for Mongo.  A query searched through a collection and returns the documents that meet the query.  Documents can be Read with the find or findOne method, which works basically the same as the delete, or for Mongo the remove method.  Create (or the insert method for mongo) also works similar to the read method.  Updates a little more complicated, since a single update will remove the document and replace it with the fields that you specify.  To avoid this, the update query takes two parameters: the document you’re querying, followed by the $set operator with the fields you want to change.  That’s CRUD in a nutshell.&lt;/p&gt;

&lt;p&gt;The third week covered schema design principals. Mongo has been considered schema-less, which means multiple documents in the same collection don’t necessarily have to have the same columns like a sql db would.  Documents are javascript objects, so the properties of a document retain whatever values as desired, even embedded documents, such as arrays or other objects.  For example, in a collection that maintains blog posts, a single post can have an embedded property for comments made to that array with objects that contain properties such as the author of that comment on that post, the date the comment was made, and the contents of the post.  A lot has to be considered for the design of a schema.  Since schema’s don’t have to match, it’s usually best if they don’t match for a specific reason.&lt;/p&gt;

&lt;p&gt;Week 4 covered performance.  This has to do with the time it takes for a query to return a given object or set of obects.  The time spent on a query, as indicated by how many documents the query looks at, can be reduced if indexes are approapriately used.  Every document has an _id field, and if not specified with one, is provided with one.  That field is indexed, meaning it’s sorted in a specific way.  Other indexes can be created, and should resemble the types of queries the end user might make.&lt;/p&gt;

&lt;p&gt;Week 5 covered the aggregation pipeline.  Aggregation finds information relevate to the entire collection, such as the average grade a class has over a group of classes. The pipeline resembles more chaining, which in this case are objects with query opperators built on top of eachother.&lt;/p&gt;

&lt;p&gt;Week 6 covered application engineering, such as replication and sharding.  These are concerns for working with a large database system in the event that a database goes down and how collections recover from those failures.&lt;/p&gt;

&lt;p&gt;In the 7th week, along with the final exam, there was content on Mongoose.  Mongoose is an ODB, and Object-Record-Mapper, which provides a layer on top from Mongo and Node and has some added functionality. These videos quickly walked through some code on how to crewate the same blog that the earlier weeks had done without the additional layer.&lt;/p&gt;

&lt;p&gt;Since this course was for node developers, so there was code examples represented in an application, and I was really happy I had worked with node before because there were some huge leaps in what the homework expected students to do.  The quizzes that went with the vides checked for understanding at a very basic level, and the final examp mirrored the homework questions.  As for the discussion, I wish I had gotten more out of it.  I’m a fan of collaboration, so when I get stuck on a problem for a while, I’d like to be able to seek help without getting the answer.  If I get the answer without a lot of stuggle on my own, I’ll probably forget what I learned. But some help is necessary.  There was some collaboration in the discussion board, but the Mongo Unversity doesn’t want any code sharing, and the ta often came across defensive instead of helpful.  Still, the course was very interesting, and it kept my engagement even on the topics like indexes, sharding, and agggregation where I didn’t feel like I had somewhere directly to apply what I had learned outside of the course.&lt;/p&gt;

&lt;p&gt;For now, I want to get better at working with node.  I’m working through a course on &lt;a href=&quot;https://www.edx.org/course/introduction-mongodb-using-mean-stack-mongodbx-m101x&quot;&gt;MEAN&lt;/a&gt;, which I hope to get a better understanding of how angular connects with node. This is a little ironic, since I’m working on an app with another developer and I’ve figured out where this happens.  Data is stored on the database, which is accessed from a service that connects to the backend api.&lt;/p&gt;

&lt;p&gt;Also, since I’ve expanded my understanding of NoSQL, I’m interested in SQL.  Codecademy has a tutorial on the subject, which I’ll probably work through soon. I’d also like to read &lt;a href=&quot;http://www.amazon.com/MongoDB-Definitive-Guide-Kristina-Chodorow/dp/1449344682/ref=sr_1_1?ie=UTF8&amp;amp;qid=1448932247&amp;amp;sr=8-1&amp;amp;keywords=mongodb&quot;&gt;MongoDB: The Definitive Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also recently found a new learning source. &lt;a href=&quot;http://www.freecodecamp.com/&quot;&gt;Free Code Camp&lt;/a&gt; has a fairly extensive sequence on stuff I should know, so I started working through it.  I’m finding gaps in my learning and doing a lot of review.  It’s keeping me busy since I can’t be as aggresive about looking for work now that I’m watching my son all day.  If a job comes my way, I’d love to work all day.  Until then, it’s not so bad raising him.  Thanksgiving was a couple days ago.  I took a few days off from the computer and visited family in Las Vegas.&lt;/p&gt;

&lt;p&gt;I got a lot out of this free course, and I would probably pay for it since it had the feedback.  If you want to take some time, I’d definately check it out.  They have courses specific to other languages as well.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://nathan-j-brenner.github.io//m101JS</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//m101JS</guid>
        
        
      </item>
    
      <item>
        <title>Why are you passionate about coding?</title>
        <description>&lt;p&gt;This is a common interview question. From a look at my resume, the question might even be asked in a way like “You’ve obviously passionate about the work you did in this other area, so what drives you in programming?”&lt;/p&gt;

&lt;p&gt;I love programming because it can be a very abstract way to create some pretty amazing solutions.  For example, say I want to know immediately I get a new email.  When I was in high school, I used to obsessively get on the computer, which involved dialing up the server, log into yahoo, only to be disappointed that there was nothing new.  Now I’ve got a device that sits in my pocket and I get a push notification for a bunch of different apps, including gmail.&lt;/p&gt;

&lt;p&gt;How does stuff like that work? Did the demand cause the solution or did some computer geek realize the potential of a device that can store data? I love taking things appart, learning how the individual pieces work together, and put the thing back together.  If I can add in some functionality, or clean up how the piece is put together, then even better. I’m not ok with going along with the status quo.  I want to ask why questions like “Why are we doing it this way”, or “How can we make this better”?&lt;/p&gt;

&lt;p&gt;As far as work goes, I started a course on MongoDB today, and I started working on a mobile app a few days ago.&lt;/p&gt;

&lt;p&gt;MongoDB offers free online courses, which have a weekly series of videos, quizzes, and homework assignments.  I thought this would be a good way to get more in depth knowledge of a non-relational database.&lt;/p&gt;

&lt;p&gt;The mobile app is a project another developer included me into.  It uses the ionic framework, which empowers angular web developers to create mobile apps without writing any ios or android native code.  This project is also great because it’s forcing me to start looking at and writing in TypeScript with the new es6 syntax, and I’m able to see how Angular is currently being written by a more experienced web developer.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2015 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//why-coding</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//why-coding</guid>
        
        
      </item>
    
      <item>
        <title>Learn WordPress in a Day</title>
        <description>&lt;p&gt;Today made me really appreciate the depth of knowledge I have in software programming and proud of what I can do if the only tools I had were a text editor and a terminal.&lt;/p&gt;

&lt;p&gt;I participated in a local event, the first of it’s kind, with the goal to teach people with no experience with WordPress how to create a site.  This was something the community asked for in the last WordCamp, and a few volunteers decided to make it happen.  It started as an event serving 25 people, and grew to 100 split between two days.  Also, most of the people at the event had little to no experience writing html and were much older than the tech savy Milenial generation.  My grandma, who is in her 70’s and has a smart phone but hates the internet, could have been at this event and would be able to make a site.&lt;/p&gt;

&lt;p&gt;The presentators were really straight forward, and stuck to their objectives.  They would show how to do something, asking the participants to just watch first, then would join and make the changes.&lt;/p&gt;

&lt;p&gt;The definition of front-end and back-end was really interesting.  When I think of backend, I think of communicating with a server with http requests and communicating with a database. Today, any changes that were made was considered the back-end and the front-end was how the changes appeared in the browser.&lt;/p&gt;

&lt;p&gt;Outside of this class, I’m teaching myself how to create custom themes.  The code is on my local apache server, and I’m applying wordpress php functions to fit the needs of the site I want to make.  Before I made the wordpress version, I created the static version, so a lot of the php work is looking at the codex to find the function that will cause the effect I’m looking for.&lt;/p&gt;

&lt;p&gt;There’s an amazing community out there creating pluggins, and it kinda makes me sad at how easy it is to add something that the person creating the site has so little knowledge of what code is causing that behavior. It also makes me realize how easy it would be for me to create websites with wordpress. When I see the DOM, I can visualize how the html.&lt;/p&gt;

&lt;p&gt;The day long presentation went really well with the participants.  We started with a theme that didn’t have any posts and pages, and created pages for home, about, blog, services, and contact.  We were provided the content for those pages, so we created those pages and posts and added the content.  As far as pluggins, we created a contact form on the contact page, we added a titled mosaic set of pictures that are reordered each time the user visits the page, we added a google map, and at the end we viewed the finished website with another theme.&lt;/p&gt;

&lt;p&gt;There were a couple things I picked up on, like a great explanation between wordpress.com and wordpress.org.  The .com site provides oppertunities for people to create free sites with limited control, and .org provides the codex and is a connection to the wordpress community.  I hope a lot of those new to wordpress go to the Portland WordCamp in October.  I bet I’d get a lot out of it as far as networking and some knowledge with the more advanced topics.  Unfortunately, I have to work for the Army that day.  In any case, I’ll continue learning how to manipulate this content management system.  Developers, like me, are able to create client based solutions by creating or revising themes in a very short timeframe, and are able to bring business owners a lot of power to bring their products to the web while being able to manage their own content of that site.  I hope I can find some work doing this.  It’s less involved than creating javascript webapps, but if writing php can give me the oppertunity to provide for my family and time to add more to my professional development, then I’d love the oppertunity.&lt;/p&gt;

&lt;p&gt;As I gain experience with wordpress, I’m looking for a place where I could apply what I’ve learned.  Before my son was born, I played with the idea of creating a jekyll site for him that my wife and I could use to communicate with our family and friends, instead of depending on facebook so much.  Maybe instead, I’ll create a wordpress site.  I’m not sure if I’d go as far as creating a custom theme, but I guess if I did, I’d try to make it reflect our lives in the Pacific Northwest.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//wordpress-in-a-day</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//wordpress-in-a-day</guid>
        
        
      </item>
    
      <item>
        <title>Broadening Horizons</title>
        <description>&lt;p&gt;A lot has happened in the last week.&lt;/p&gt;

&lt;p&gt;I switched text editors.  I have been using Sublime Text for the last year, and I’m working on Visual Studio Code.  I had briefly used Brackets and Atom, but each time I found myself losing coding time to figure out the new tool.  I’ve committed to switching to Code because I want to follow what CSG Pro is doing.  Ken Howard is a developer I’ve been talking to over the last few months.  He’s a front-end developer with Angular, and he loves Code and TypeScript.  TypeScript is going hand in hand with Angular 2, so I want to put myself in the position to be competite for that kind of work.  I’ve looked into TypeScript a little bit, and it works really well with Code, so I’ll probably be refactoring some of the Angular projects with TypeScript soon.  I also want to start building Angular apps with express and gulp just so I can keep up on the full stack side of the development.&lt;/p&gt;

&lt;p&gt;I’ve also realized that looking for front-end work as a junior level dev isn’t going to get me anywhere, and that I need to be expanding into more backend work.  In the last day, I’ve thrown myself into WordPress, again relying on Treehouse as a start. It’s hard to watch so many videos but I’m a lot like my son right now: just taking it all in.  I completed the php track months ago, before JS Immersion, so recognizing the code is coming back, and I’m starting to see the benifits of cms’s.&lt;/p&gt;

&lt;p&gt;I’ve also started looking for different forms of work.  My wife and I are workaholics, and personally, it drives me insane, even with a young child at home, to not have work to do.  It’s the intrinsic motivation, and we’re going to be those parents that would rather spend the majority of their time working than with our family.  Bad news for the kids, good news for the boss.  I talked to some salesmen at a meetup, and he told me Comcast is hiring, so I applied for a technitian job.  I’d love to be able to write full stack javascript apps, or even just code all day but I’m at the point where I’d rather have a job that I hate and be looking for another job than to be struggling with looking for the job I want.  It’s basically like I’m back where I was a year ago when I left education.  I wasn’t thrilled about coding, I just wanted a job where I could make a good living and if I got to like the work a little, that would  be great.  This is an interesting mindset, since I’m in the military and I could have been working for them this week but that’s an area that I really don’t want to be.  It’s like I’ll do anything…but work in education and work for the military.  I have a lot of respect for that work and for those that do that work, but it’s not for me and at least I know what it’s like to have been there.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//broadening-horizons</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//broadening-horizons</guid>
        
        
      </item>
    
      <item>
        <title>Multi-dimentional Todo List part 1</title>
        <description>&lt;p&gt;When starting with an unfamiliar mvc, an example of creating a todo list seems to be fairly common way to see what is so different from that framework.  My calendarApp is basically just that with backbone, and lately I’ve been working on an Angular version.&lt;/p&gt;

&lt;p&gt;If you take a look at either of those, or on my portfolio in general, you’ll probably come to the conclusions that I’m not that flashy on the front-end.  My projects typically don’t show off my ability to use great fonts or amazing css layouts. I like writting css and sass, but the idea of how to make something look great eludes me.  If someone came up to me and gave me a wireframe, then I’d be all over interpreting their idea into the browser as closely as possible.  But even more interesting, when I get an idea for an app, I become absorbed into the functionality of it and you can let me loose and I’ll iterate over and over to create functioning code.&lt;/p&gt;

&lt;p&gt;The taskManager app had the following iterations: Basic todo app, objects in a todo app, integrating the first iteration into the second, debugging and revising the ui, then integrating the backend.&lt;/p&gt;

&lt;p&gt;##Basic Angular todo App
On a side note, as I was coming to a stopping point with this project today also happens to be the first day the current Portland Code School JavaScript Immersion course is working with their first mvc, which again is backbone.&lt;/p&gt;

&lt;p&gt;About a week ago, I started watching &lt;a href=&quot;https://www.youtube.com/watch?v=TRrL5j3MIvo&quot;&gt;Angular.js in 50 examples&lt;/a&gt;. From the beginning, it looked like a poor video recording of a meetup, but I really liked how Curran Kelleher presented his incredibly well documented &lt;a href=&quot;http://curran.github.io/screencasts/introToAngular/exampleViewer/#/&quot;&gt;gitHub repo&lt;/a&gt;.  I also really liked how he starts with basic javaScript and moves through the history of adding in jQuery, then Backbone, and finally Angular.  He made the case that with each of those iterations, javaScript was becoming more powerful by becoming easier to write.  Case in point, I’ve been reading JavaScript: The Good Parts lately.  Most of the time, I feel like I’m actively writing in Angular or Node, but there’s not a whole lot of the book that’s surprising or new.  To write in some of these more recent frameworks requires a depth of understanding of core javascript, which makes me about as excited as nervous with the advent of Angular 2.0 and ES6.&lt;/p&gt;

&lt;p&gt;By the time I got to Example 15, I gave in and started coding as a departure from the video.  By this point, the directives ng-app and ng-controller are written into the index.html.  Ng-app is typically written in the html tag, and the controller can be written in the div where you want the model to have access to the view.  I haven’t written a project yet where I’ve needed more than one model, so the ng-app and ng-controller directives can be in the same html tag.  In the head, I have the Angular cdn downloading into the page, and just before the closing body tag, I have app.js and the mainCtrl.js loading into the page. The only other tags in the page is form tag with the directive ng-submit, which has the value to add a task (a method written into the controller). Within that form are two input tags: The first is to take text and has an ng-model as an attribute.  The second has a &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;submit&quot;&lt;/code&gt;.  When the submit input tag is clicked, the form fires the &lt;code class=&quot;highlighter-rouge&quot;&gt;addTask()&lt;/code&gt; method within the $scope. Directly below this tag is an unordered list, with a single list element that has the ng-repeat directive to loop through the ‘task in tasks’.  When the user clicks on the submit input, the task that the user typed into the other input tag is pushed into the $scope.tasks array, and the user sees that new task moved from the input into the unordered list with a bullet point.&lt;/p&gt;

&lt;p&gt;Also within the ng-repeat are input tags to edit and delete the tasks.  I picked up the function syntax for these methods from the youtube video.  They’re not my favorite, as I’ve seen these functions in different ways, but I went with it for today.  The edit method is an extension of the delete method.  When the delete method is applied, due to an ng-click event, that element (due to the way Angular handles data binding) is spliced from the array that is lives in, so it doesn’t appear in the ng-repeat element. The difference with edit is that the element is set to the ng-model of the input tag where it originally came from, so when the user clicks on the create task with the edited task, the task is again appended to the $scope.tasks array, so it appears in the view under the ng-repeat directive.&lt;/p&gt;

&lt;p&gt;BWT, it’d probably make a lot of sense by now if you could see snippets of the code.  Instead, you can if you visit the portfolio page and find this app.  Person.html and public/js/controllers/personCtrl.js has the code I’m referencing.&lt;/p&gt;

&lt;p&gt;Like I mentioned earlier, this is where I started itching to move beyond the videos.  Stay tuned for the next iteration.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Sep 2015 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//multidimentional-todo-list</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//multidimentional-todo-list</guid>
        
        
      </item>
    
      <item>
        <title>Getting paid to write</title>
        <description>&lt;p&gt;As I was driving to Portland this morning, there was an article on NPR about the Writer’s Guild of America.  If you author a book, should you get paid for it? Should you get paid enough that you can make a living off of your writing?  And who should publish your work: You or a company?&lt;/p&gt;

&lt;p&gt;I can’t relate directly.  Indirectly, I understand how frustrating it can sometimes be when you have a project in mind but you’re limited on how much time you can put into that project due to seemingly silly external variables, like the cost of living.  If you can’t make a living off of the work, then maybe you’re investing your time in activity that can’t provide the basic necessities of life and you should reevaluate what you’re doing with the little bit of time you have.&lt;/p&gt;

&lt;p&gt;By doing something that you want to do may actually be a waste of your time.  Maybe it’s better to do something that you don’t want to do for a little while so that with the time left over you can do the things you like to do, like take on new projects or write another book.&lt;/p&gt;

&lt;p&gt;When I was growing up, I earned an allowance.  I think it was a dollar a week for which in turn I’d do chores around the house that I’d probably would have done anyway because I was too young to question my parents.  I didn’t have a need for that money; my parents gave me everything I needed.  The point was to gain a respect for my time so that at some point, I would be able to easily make the decision to trade my time for money at a rate that would let me spend the rest of my time how I choose.&lt;/p&gt;

&lt;p&gt;Ironically, as I idolized my father who is a public school teacher, I got the silly idea that my time wasn’t worth very much, so I followed that path of doing work that I was really passionate about.  Another bit of irony was how he was just telling me recently that if you pay people more, then they’ll be more motivated to do a good job.  If people can pay for the basic necessities, then their financial stress will hinder their job performance.&lt;/p&gt;

&lt;p&gt;Bottom line, if you’re an artist and you want to be paid more, do work that is considered valueable.  If you’re a broke writer, teach kids how to read. That’s a terrible example, and there’s a lot of writers that turn to teaching and unfortunately, that’ll probably mean you need to learn the art of teaching, but there’s commonality.  That begs the question: Is art universal?  This depends on the definition of the word art, just like how writers define language.  It’s my perception that launguage requires a dynamic, and organized flow of communication between more than one party.&lt;/p&gt;

&lt;p&gt;Better yet, if you’re a writer, I’d be you know a lot about communication so why not communicate to others through a different type of language such as html or even JavaScript?  The leap from writing novels to programs is quite a bit.  Programming isn’t something that’s easy to figure out, but there’s a deep rooted level of connection between every different form of art.&lt;/p&gt;

&lt;p&gt;Enough of this vague ramble.  Lately, I’ve been working through the D3.js course on Treehouse, and it’s tough.  I can’t wait to finish it so I can dive into the documentation and start doing some more engaged form of learning, which is actually writing code.&lt;/p&gt;

&lt;p&gt;I’m at that point with Angular. I’m in the middle of another spa.  It’s called taskManager.  Imagine &lt;a href=&quot;https://trello.com/&quot;&gt;trello&lt;/a&gt;.  Your boss has a bunch of stuff that needs to get done, so he creates a list, and then he assigns those items to team members.  I didn’t intend to create a trello clone; I wanted to get better at creating programs with Angular so of course the code is probably messier than it needs to be.  I got the idea from &lt;a href=&quot;https://www.youtube.com/watch?v=TRrL5j3MIvo&quot;&gt;50 Angular examples&lt;/a&gt;.  I stopped midway to do some applicable coding and got sidetracked. &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Firebase&lt;/a&gt; might get added on to give it a backend. I also added Angular into the &lt;a href=&quot;http://nathan-j-brenner.github.io/portfolio/&quot;&gt;portfolio&lt;/a&gt; page of this site.  It made it much easier to maintain, and I’ll probably add in some &lt;a href=&quot;https://angular-ui.github.io/&quot;&gt;AngularUI&lt;/a&gt; after I have a more solid grasp of Angular.&lt;/p&gt;

&lt;p&gt;I’ve got another project underway that involves &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;. Ionic is a framework that lets you build native apps out of web based apps. So create the web based app with HTML, CSS, and JavaScript, specifically with Angular, and you Ionic will generate the native version so no need to learn Objective-C or Android.&lt;/p&gt;

&lt;p&gt;I write for free and code for free willingly as means to promote a product.  That product’s ability to learn is more valueable than what that product already knows.  Coding for free is really just the vehicle to develop that product further. I’ve been paid to write, which for the web is hard because there’s always room for revision.  The easiest thing to do is stop when the money stops coming in.  I got into coding a year ago because I wanted to get paid more.  Right now that means starting with less than what I used to make.  I’m a little bit nervous for October 9th. Any coding for free projects will be cut back and I’ll take on the role to raise my son.  The goal is to get to the point where I can make enough money so that my wife can cut back more on her work. Minimum wage jobs don’t make that possible, and neither does artistic endevors like teaching, even if you have more education and training in that field than most of the people in the world.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Sep 2015 00:00:00 -0700</pubDate>
        <link>http://nathan-j-brenner.github.io//writing-for-free</link>
        <guid isPermaLink="true">http://nathan-j-brenner.github.io//writing-for-free</guid>
        
        
      </item>
    
  </channel>
</rss>
