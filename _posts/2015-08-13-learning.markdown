---
layout: post
title: "Welcome to Jekyll"
date : 2015-07-30
---

How did I learn to code? That's probably not so much as important as how should you go about learning to code, but maybe my experience can give you some directions or it can give you an indication on what I know and how I think.

I had prior experience with Khan Academy.  I used their app to refresh myself on public education mathamatics.  I didn't spend very much time there because I got the feeling like the audience was targeted to children.

I found Portland Code School, and they had a partnership with Treehouse.  Treehouse is an incredible resource, and from what I've seen in other online education platform, treehouse does much more than anything I've seen before.  Treehouse has courses on an incredible range of topics across multiple languages.  I've focused on html, css, and javaScript but I've completed some courses in php, python, design, development tools, business, wordPress, java, and digital literacy.  I haven't touched Ruby, Android, and iOS yet.

Each course has subtopics, which make up badges that you can earn.  Within a badge, there are a series of videos and assessments.  Watching a video earns a user one point, completing an assessment (like a quiz or code challenge) earns you more points, and completing a badge and later a course earns you more points.  As of this post, I'm at 24,640 points, which seems like a lot but it's just an indication really of how eager I am to learn.

Treehouse also has tracks, which group a series of courses between sometimes one language to mulitple langauges.  For example, the front end web development track has courses on html, css, and javaScript.  Often the tracks overlap a little bit, so completing additional tracks becomes less work due to the work previously completed.  For example, the Full Stack JavaScript track had a lot of duplicate courses in their front end javascript track.  When I had completed a couple of tracks, I queried the remaining courses in languages like html, css, and javaScript and I complete those as I come to them or when new courses are added, in the case with the Gulp.js. Also, the tracks do an incredible job at scaffolding my learning curve.  The sequence is great because each course builds on previous courses.  

But treehouse is not a one stop solution to learning every thing you need to learn to code.  As engaging the videos are and how well the courses are scaffolded, and even with code challenges, there's still a gap that online learning cannot fill, and there's gaps in learning.

As far as getting a more complete understanding on some topics, I've spent time on other free education sites like codecademy.  They've got a Commandline course in the works and it's meshing really well with what I can already do in the terminal. Code wars is another interactive site, but I've had a hard time getting into it because I find it easy to get stuck without any support. But code wars really pushes me on javascript fundamentals.  NodeSchool.io has also a bunch of tutorials that run through the terminal, and I'm hoping to get into that more since I'm done with PCS.  That resource can be pretty challenging.  

Beyond interactive sites, really the place I find myself dug into the most is in the documentation, which can be challenging because it comes down to how well the documentation is written and what experience the author intends the reader to have. A spectrum would span between jQuery (which I think is really easy to read) and nodejs.org (which I find difficult to read).  Intially, I also looked at w3schools but eventually switched to mdn.  These sites have core concepts with definitions and usually multiple examples for different cases.

Even with all of these resources, they can only go so far without an oppertunity to be creative (where you have a goal to work towards) and an oppertunity to work with someone else. I've found that when I've pair programmed, in either role I learn a lot.  I suppose I would rather be the person that's not stuck: I often feel like the other person that's trying to help takes a while to figure out where I'm at, which is a lot of work.  That helper has to really figure out what and how you're thinking to make a suggestion that the stuck person is looking for.  

By and large, code bootcamps like Portland Code School provided the oppertunity to get that realistic exposure to working on projects.  I can't imagine learning the full stack without their help, but I think they could do more in the role of recruiter if they continue to sell themselves to clients as a vehicle to get into a job in tech.  Often what makes pedagogical sense often conflicts with the realities of what the industry is like.  A good example of this is how students come out of college and how they stuggle when they get a job.  That in turn reinforces employers a bias that learning in a school is not equivelent to the actual experience of having a job.  The flipped classroom is supposed to ignore some of that pedagogy a little so that students do the job as they are learning, but that means the students have to experience a lot of failure and makes the teacher feel useless.

At this point, I've wandering on sites like treehouse and codecademy along with meeting people in the tech industry with the hopes to find a place to work on a team on some new projects.  My wife just gave birth to our first child, so I'm trying to spend time at home and I've got to complete 2 more weeks of orders in a couple weeks from now.  When that's done, I really hope I've got some projects that can also bring in some income.